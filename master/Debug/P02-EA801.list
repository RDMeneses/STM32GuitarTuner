
P02-EA801.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a8  080074b0  080074b0  000084b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  0000a420  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  0000a420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a64  08008a64  00009a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08008a68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000420  08008e88  0000a420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08008e88  0000a8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f111  00000000  00000000  0000a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266b  00000000  00000000  00019561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0001bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6b  00000000  00000000  0001ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ae  00000000  00000000  0001d603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f57  00000000  00000000  00035cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afb9  00000000  00000000  00047c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  000e2c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e7330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007498 	.word	0x08007498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	08007498 	.word	0x08007498

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	0000      	movs	r0, r0
	...

08000f78 <fft>:
   [7]   Let w.im = -sin(2*PI*m/N)
   [8]   Let v[m] = ve[m] + w*vo[m]
   [9]   Let v[m+N/2] = ve[m] - w*vo[m]
 */
void fft( complex *v, int n, complex *tmp )
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08c      	sub	sp, #48	@ 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  if(n>1) {			/* otherwise, do nothing and return */
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	f340 8124 	ble.w	80011d4 <fft+0x25c>
    int k,m;    complex z, w, *vo, *ve;
    ve = tmp; vo = tmp+n/2;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	0fda      	lsrs	r2, r3, #31
 8000f94:	4413      	add	r3, r2
 8000f96:	105b      	asrs	r3, r3, #1
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	623b      	str	r3, [r7, #32]
    for(k=0; k<n/2; k++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fa4:	e01d      	b.n	8000fe2 <fft+0x6a>
      ve[k] = v[2*k];
 8000fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	18d1      	adds	r1, r2, r3
 8000fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb4:	4413      	add	r3, r2
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbc:	e883 0003 	stmia.w	r3, {r0, r1}
      vo[k] = v[2*k+1];
 8000fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	18d1      	adds	r1, r2, r3
 8000fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	6a3a      	ldr	r2, [r7, #32]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd8:	e883 0003 	stmia.w	r3, {r0, r1}
    for(k=0; k<n/2; k++) {
 8000fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fde:	3301      	adds	r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	0fda      	lsrs	r2, r3, #31
 8000fe6:	4413      	add	r3, r2
 8000fe8:	105b      	asrs	r3, r3, #1
 8000fea:	461a      	mov	r2, r3
 8000fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	dbd9      	blt.n	8000fa6 <fft+0x2e>
    }
    fft( ve, n/2, v );		/* FFT on even-indexed elements of v[] */
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	0fda      	lsrs	r2, r3, #31
 8000ff6:	4413      	add	r3, r2
 8000ff8:	105b      	asrs	r3, r3, #1
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001000:	f7ff ffba 	bl	8000f78 <fft>
    fft( vo, n/2, v );		/* FFT on odd-indexed elements of v[] */
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	0fda      	lsrs	r2, r3, #31
 8001008:	4413      	add	r3, r2
 800100a:	105b      	asrs	r3, r3, #1
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4619      	mov	r1, r3
 8001010:	6a38      	ldr	r0, [r7, #32]
 8001012:	f7ff ffb1 	bl	8000f78 <fft>
    for(m=0; m<n/2; m++) {
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800101a:	e0d1      	b.n	80011c0 <fft+0x248>
      w.Re = cos(2*PI*m/(double)n);
 800101c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800101e:	f7ff fa81 	bl	8000524 <__aeabi_i2d>
 8001022:	a36f      	add	r3, pc, #444	@ (adr r3, 80011e0 <fft+0x268>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fae6 	bl	80005f8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4614      	mov	r4, r2
 8001032:	461d      	mov	r5, r3
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f7ff fa75 	bl	8000524 <__aeabi_i2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff fc03 	bl	800084c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	ec43 2b17 	vmov	d7, r2, r3
 800104e:	eeb0 0a47 	vmov.f32	s0, s14
 8001052:	eef0 0a67 	vmov.f32	s1, s15
 8001056:	f005 f8cf 	bl	80061f8 <cos>
 800105a:	ec53 2b10 	vmov	r2, r3, d0
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fda1 	bl	8000ba8 <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	613b      	str	r3, [r7, #16]
      w.Im = -sin(2*PI*m/(double)n);
 800106a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800106c:	f7ff fa5a 	bl	8000524 <__aeabi_i2d>
 8001070:	a35b      	add	r3, pc, #364	@ (adr r3, 80011e0 <fft+0x268>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fabf 	bl	80005f8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4614      	mov	r4, r2
 8001080:	461d      	mov	r5, r3
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff fa4e 	bl	8000524 <__aeabi_i2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff fbdc 	bl	800084c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b17 	vmov	d7, r2, r3
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f005 f8fc 	bl	80062a0 <sin>
 80010a8:	ec53 2b10 	vmov	r2, r3, d0
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd7a 	bl	8000ba8 <__aeabi_d2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef1 7a67 	vneg.f32	s15, s15
 80010be:	edc7 7a05 	vstr	s15, [r7, #20]
      z.Re = w.Re*vo[m].Re - w.Im*vo[m].Im;	/* Re(w*vo[m]) */
 80010c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	6a3a      	ldr	r2, [r7, #32]
 80010cc:	4413      	add	r3, r2
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80010da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	6a3a      	ldr	r2, [r7, #32]
 80010e0:	4413      	add	r3, r2
 80010e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a06 	vstr	s15, [r7, #24]
      z.Im = w.Re*vo[m].Im + w.Im*vo[m].Re;	/* Im(w*vo[m]) */
 80010f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	6a3a      	ldr	r2, [r7, #32]
 80010fc:	4413      	add	r3, r2
 80010fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001106:	edd7 6a05 	vldr	s13, [r7, #20]
 800110a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	6a3a      	ldr	r2, [r7, #32]
 8001110:	4413      	add	r3, r2
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111e:	edc7 7a07 	vstr	s15, [r7, #28]
      v[  m  ].Re = ve[m].Re + z.Re;
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001128:	4413      	add	r3, r2
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	edc3 7a00 	vstr	s15, [r3]
      v[  m  ].Im = ve[m].Im + z.Im;
 8001142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001148:	4413      	add	r3, r2
 800114a:	ed93 7a01 	vldr	s14, [r3, #4]
 800114e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	edc3 7a01 	vstr	s15, [r3, #4]
      v[m+n/2].Re = ve[m].Re - z.Re;
 8001162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001168:	4413      	add	r3, r2
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0fda      	lsrs	r2, r3, #31
 8001176:	4413      	add	r3, r2
 8001178:	105b      	asrs	r3, r3, #1
 800117a:	461a      	mov	r2, r3
 800117c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	edc3 7a00 	vstr	s15, [r3]
      v[m+n/2].Im = ve[m].Im - z.Im;
 800118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001194:	4413      	add	r3, r2
 8001196:	ed93 7a01 	vldr	s14, [r3, #4]
 800119a:	edd7 7a07 	vldr	s15, [r7, #28]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	0fda      	lsrs	r2, r3, #31
 80011a2:	4413      	add	r3, r2
 80011a4:	105b      	asrs	r3, r3, #1
 80011a6:	461a      	mov	r2, r3
 80011a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b6:	edc3 7a01 	vstr	s15, [r3, #4]
    for(m=0; m<n/2; m++) {
 80011ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011bc:	3301      	adds	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	0fda      	lsrs	r2, r3, #31
 80011c4:	4413      	add	r3, r2
 80011c6:	105b      	asrs	r3, r3, #1
 80011c8:	461a      	mov	r2, r3
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	4293      	cmp	r3, r2
 80011ce:	f6ff af25 	blt.w	800101c <fft+0xa4>
    }
  }
  return;
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
}
 80011d6:	3730      	adds	r7, #48	@ 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	54442d18 	.word	0x54442d18
 80011e4:	401921fb 	.word	0x401921fb

080011e8 <get_freq_bins>:
 * @param freq: pointer to array of size N
 * @param N: number of bins in the DFT 
 * @param t_sampling: time between samples (1/sampling_frequency) 
 */
void get_freq_bins(float* freq, int N, float t_sampling)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	ed87 0a01 	vstr	s0, [r7, #4]
    int i;
    float divisor = N*t_sampling;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	ed97 7a01 	vldr	s14, [r7, #4]
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a04 	vstr	s15, [r7, #16]
    for(i=0; i<(N/2); i++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e011      	b.n	8001236 <get_freq_bins+0x4e>
    {
	freq[i] = (float)i/divisor;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	ed97 7a04 	vldr	s14, [r7, #16]
 8001228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122c:	edc3 7a00 	vstr	s15, [r3]
    for(i=0; i<(N/2); i++)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0fda      	lsrs	r2, r3, #31
 800123a:	4413      	add	r3, r2
 800123c:	105b      	asrs	r3, r3, #1
 800123e:	461a      	mov	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4293      	cmp	r3, r2
 8001244:	dbe5      	blt.n	8001212 <get_freq_bins+0x2a>
    }

    for(i=(N/2); i<N; i++)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	0fda      	lsrs	r2, r3, #31
 800124a:	4413      	add	r3, r2
 800124c:	105b      	asrs	r3, r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e013      	b.n	800127a <get_freq_bins+0x92>
    {
	freq[i] = (float)-(N-i)/divisor;
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	ed97 7a04 	vldr	s14, [r7, #16]
 800126c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001270:	edc3 7a00 	vstr	s15, [r3]
    for(i=(N/2); i<N; i++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbe7      	blt.n	8001252 <get_freq_bins+0x6a>
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <freq_to_index>:
 * @param freq: desired frequency to find index of
 * @param fs: sampling frequency in Hz
 * @param N: FFT size
 */
int freq_to_index(float freq, int fs, int N)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	ed87 0a03 	vstr	s0, [r7, #12]
 800129a:	60b8      	str	r0, [r7, #8]
 800129c:	6079      	str	r1, [r7, #4]
    return (int) (freq*N/fs);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c2:	ee17 3a90 	vmov	r3, s15
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <get_magnitudes>:
 * @param magnitudes: array of floats in which to store magnitude values
 * @param v: array of complex values resulting from FFT
 * @param N: number of points in FFT
 */
void get_magnitudes(float* magnitudes, complex* v, int N)
{
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b087      	sub	sp, #28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
    int i;
    for(i=0; i<N; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e034      	b.n	800134e <get_magnitudes+0x7c>
    {
	magnitudes[i] = (float)sqrt(v[i].Re*v[i].Re + v[i].Im*v[i].Im);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4413      	add	r3, r2
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	edd3 6a01 	vldr	s13, [r3, #4]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001320:	ee17 0a90 	vmov	r0, s15
 8001324:	f7ff f910 	bl	8000548 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	ec43 2b10 	vmov	d0, r2, r3
 8001330:	f004 ff34 	bl	800619c <sqrt>
 8001334:	ec51 0b10 	vmov	r0, r1, d0
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	18d4      	adds	r4, r2, r3
 8001340:	f7ff fc32 	bl	8000ba8 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	6023      	str	r3, [r4, #0]
    for(i=0; i<N; i++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbc6      	blt.n	80012e4 <get_magnitudes+0x12>
    }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}

08001360 <filter_frequencies>:
 * @param freq_to_remove: desired frequency to be removed
 * @param thresh: Remove all frequencies between freq_to_remove +- thresh
 * @param N: length of frequency domain signal
 */
void filter_frequencies(float* magnitudes, float* freq, float freq_to_remove, float thresh, int N)
{
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	b088      	sub	sp, #32
 8001366:	af00      	add	r7, sp, #0
 8001368:	6178      	str	r0, [r7, #20]
 800136a:	6139      	str	r1, [r7, #16]
 800136c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001370:	edc7 0a02 	vstr	s1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
    int i;

    for(i=0; i<N; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e031      	b.n	80013e0 <filter_frequencies+0x80>
    {
	if( fabs((fabs(freq[i]) - freq_to_remove)) < thresh)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	eef0 7ae7 	vabs.f32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff f8da 	bl	8000548 <__aeabi_f2d>
 8001394:	4680      	mov	r8, r0
 8001396:	4689      	mov	r9, r1
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff f8d5 	bl	8000548 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4640      	mov	r0, r8
 80013a4:	4649      	mov	r1, r9
 80013a6:	f7fe ff6f 	bl	8000288 <__aeabi_dsub>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4614      	mov	r4, r2
 80013b0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f7ff f8c7 	bl	8000548 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7ff fb8b 	bl	8000adc <__aeabi_dcmplt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <filter_frequencies+0x7a>
	{
	    magnitudes[i] = 0;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4413      	add	r3, r2
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
    for(i=0; i<N; i++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbc9      	blt.n	800137c <filter_frequencies+0x1c>
	}
    }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013f4 <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	8a5b      	ldrh	r3, [r3, #18]
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0412      	lsls	r2, r2, #16
 800140c:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	1cf9      	adds	r1, r7, #3
 8001414:	2301      	movs	r3, #1
 8001416:	2201      	movs	r2, #1
 8001418:	f003 fc17 	bl	8004c4a <HAL_SPI_Transmit>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8a5a      	ldrh	r2, [r3, #18]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	1cf9      	adds	r1, r7, #3
 8001440:	2301      	movs	r3, #1
 8001442:	2201      	movs	r2, #1
 8001444:	f003 fc01 	bl	8004c4a <HAL_SPI_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8a5a      	ldrh	r2, [r3, #18]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 8001466:	e015      	b.n	8001494 <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800146e:	bf28      	it	cs
 8001470:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8001474:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	8afa      	ldrh	r2, [r7, #22]
 800147c:	230a      	movs	r3, #10
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	f003 fbe3 	bl	8004c4a <HAL_SPI_Transmit>
        buff += chunk_size;
 8001484:	8afb      	ldrh	r3, [r7, #22]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	4413      	add	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e6      	bne.n	8001468 <ILI9341_WriteBuffer+0x18>
    }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	817b      	strh	r3, [r7, #10]
 80014b6:	460b      	mov	r3, r1
 80014b8:	813b      	strh	r3, [r7, #8]
 80014ba:	4613      	mov	r3, r2
 80014bc:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 80014be:	212a      	movs	r1, #42	@ 0x2a
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff ff97 	bl	80013f4 <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 80014c6:	897b      	ldrh	r3, [r7, #10]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 80014d0:	897b      	ldrh	r3, [r7, #10]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8a5a      	ldrh	r2, [r3, #18]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f107 0114 	add.w	r1, r7, #20
 80014f8:	2301      	movs	r3, #1
 80014fa:	2204      	movs	r2, #4
 80014fc:	f003 fba5 	bl	8004c4a <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 8001500:	212b      	movs	r1, #43	@ 0x2b
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff ff76 	bl	80013f4 <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 8001512:	893b      	ldrh	r3, [r7, #8]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8001518:	8c3b      	ldrh	r3, [r7, #32]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 8001522:	8c3b      	ldrh	r3, [r7, #32]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8a5a      	ldrh	r2, [r3, #18]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f107 0114 	add.w	r1, r7, #20
 800153a:	2301      	movs	r3, #1
 800153c:	2204      	movs	r2, #4
 800153e:	f003 fb84 	bl	8004c4a <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 8001542:	212c      	movs	r1, #44	@ 0x2c
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff ff55 	bl	80013f4 <ILI9341_WriteCommand>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	8a9b      	ldrh	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0412      	lsls	r2, r2, #16
 8001566:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001568:	2005      	movs	r0, #5
 800156a:	f001 fb5d 	bl	8002c28 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8a9a      	ldrh	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	619a      	str	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	8a1b      	ldrh	r3, [r3, #16]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffdb 	bl	8001552 <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 800159c:	2101      	movs	r1, #1
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff28 	bl	80013f4 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80015a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015a8:	f001 fb3e 	bl	8002c28 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 80015ac:	21cb      	movs	r1, #203	@ 0xcb
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff20 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 80015b4:	2139      	movs	r1, #57	@ 0x39
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff34 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 80015bc:	212c      	movs	r1, #44	@ 0x2c
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff30 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff2c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 80015cc:	2134      	movs	r1, #52	@ 0x34
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff28 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 80015d4:	2102      	movs	r1, #2
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff24 	bl	8001424 <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 80015dc:	21cf      	movs	r1, #207	@ 0xcf
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff08 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80015e4:	2100      	movs	r1, #0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff1c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80015ec:	21c1      	movs	r1, #193	@ 0xc1
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff18 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 80015f4:	2130      	movs	r1, #48	@ 0x30
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff14 	bl	8001424 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 80015fc:	21e8      	movs	r1, #232	@ 0xe8
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fef8 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001604:	2185      	movs	r1, #133	@ 0x85
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff0c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff08 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001614:	2178      	movs	r1, #120	@ 0x78
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff04 	bl	8001424 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 800161c:	21ea      	movs	r1, #234	@ 0xea
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fee8 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fefc 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fef8 	bl	8001424 <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001634:	21ed      	movs	r1, #237	@ 0xed
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fedc 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 800163c:	2164      	movs	r1, #100	@ 0x64
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fef0 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001644:	2103      	movs	r1, #3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff feec 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 800164c:	2112      	movs	r1, #18
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fee8 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001654:	2181      	movs	r1, #129	@ 0x81
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fee4 	bl	8001424 <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 800165c:	21f7      	movs	r1, #247	@ 0xf7
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fec8 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001664:	2120      	movs	r1, #32
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fedc 	bl	8001424 <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 800166c:	21c0      	movs	r1, #192	@ 0xc0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fec0 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001674:	2123      	movs	r1, #35	@ 0x23
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fed4 	bl	8001424 <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 800167c:	21c1      	movs	r1, #193	@ 0xc1
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff feb8 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001684:	2110      	movs	r1, #16
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fecc 	bl	8001424 <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 800168c:	21c5      	movs	r1, #197	@ 0xc5
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff feb0 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001694:	213e      	movs	r1, #62	@ 0x3e
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fec4 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 800169c:	2128      	movs	r1, #40	@ 0x28
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fec0 	bl	8001424 <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 80016a4:	21c7      	movs	r1, #199	@ 0xc7
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fea4 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 80016ac:	2186      	movs	r1, #134	@ 0x86
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff feb8 	bl	8001424 <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 80016b4:	2136      	movs	r1, #54	@ 0x36
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fe9c 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 80016bc:	2148      	movs	r1, #72	@ 0x48
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff feb0 	bl	8001424 <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 80016c4:	213a      	movs	r1, #58	@ 0x3a
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe94 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 80016cc:	2155      	movs	r1, #85	@ 0x55
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fea8 	bl	8001424 <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 80016d4:	21b1      	movs	r1, #177	@ 0xb1
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe8c 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80016dc:	2100      	movs	r1, #0
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fea0 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 80016e4:	2118      	movs	r1, #24
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fe9c 	bl	8001424 <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 80016ec:	21b6      	movs	r1, #182	@ 0xb6
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe80 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 80016f4:	2108      	movs	r1, #8
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fe94 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 80016fc:	2182      	movs	r1, #130	@ 0x82
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe90 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001704:	2127      	movs	r1, #39	@ 0x27
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fe8c 	bl	8001424 <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 800170c:	21f2      	movs	r1, #242	@ 0xf2
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe70 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001714:	2100      	movs	r1, #0
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe84 	bl	8001424 <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 800171c:	2126      	movs	r1, #38	@ 0x26
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe68 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001724:	2101      	movs	r1, #1
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe7c 	bl	8001424 <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 800172c:	21e0      	movs	r1, #224	@ 0xe0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe60 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001734:	210f      	movs	r1, #15
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fe74 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 800173c:	2131      	movs	r1, #49	@ 0x31
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fe70 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001744:	212b      	movs	r1, #43	@ 0x2b
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe6c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 800174c:	210c      	movs	r1, #12
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fe68 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001754:	210e      	movs	r1, #14
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe64 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 800175c:	2108      	movs	r1, #8
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe60 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001764:	214e      	movs	r1, #78	@ 0x4e
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe5c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 800176c:	21f1      	movs	r1, #241	@ 0xf1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe58 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001774:	2137      	movs	r1, #55	@ 0x37
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe54 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 800177c:	2107      	movs	r1, #7
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fe50 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001784:	2110      	movs	r1, #16
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fe4c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 800178c:	2103      	movs	r1, #3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe48 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001794:	210e      	movs	r1, #14
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fe44 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 800179c:	2109      	movs	r1, #9
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fe40 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80017a4:	2100      	movs	r1, #0
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe3c 	bl	8001424 <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 80017ac:	21e1      	movs	r1, #225	@ 0xe1
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe20 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fe34 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 80017bc:	210e      	movs	r1, #14
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe30 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 80017c4:	2114      	movs	r1, #20
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fe2c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 80017cc:	2103      	movs	r1, #3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe28 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 80017d4:	2111      	movs	r1, #17
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe24 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 80017dc:	2107      	movs	r1, #7
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fe20 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 80017e4:	2131      	movs	r1, #49	@ 0x31
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fe1c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80017ec:	21c1      	movs	r1, #193	@ 0xc1
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fe18 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 80017f4:	2148      	movs	r1, #72	@ 0x48
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe14 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 80017fc:	2108      	movs	r1, #8
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe10 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001804:	210f      	movs	r1, #15
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fe0c 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 800180c:	210c      	movs	r1, #12
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fe08 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001814:	2131      	movs	r1, #49	@ 0x31
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fe04 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 800181c:	2136      	movs	r1, #54	@ 0x36
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fe00 	bl	8001424 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001824:	210f      	movs	r1, #15
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fdfc 	bl	8001424 <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 800182c:	2111      	movs	r1, #17
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fde0 	bl	80013f4 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001834:	2078      	movs	r0, #120	@ 0x78
 8001836:	f001 f9f7 	bl	8002c28 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 800183a:	2129      	movs	r1, #41	@ 0x29
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdd9 	bl	80013f4 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001842:	2136      	movs	r1, #54	@ 0x36
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fdd5 	bl	80013f4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e9b      	ldrb	r3, [r3, #26]
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fde7 	bl	8001424 <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8a1a      	ldrh	r2, [r3, #16]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	619a      	str	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	817b      	strh	r3, [r7, #10]
 800187a:	460b      	mov	r3, r1
 800187c:	813b      	strh	r3, [r7, #8]
 800187e:	4613      	mov	r3, r2
 8001880:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8adb      	ldrh	r3, [r3, #22]
 8001886:	897a      	ldrh	r2, [r7, #10]
 8001888:	429a      	cmp	r2, r3
 800188a:	d233      	bcs.n	80018f4 <ILI9341_DrawPixel+0x8c>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8b1b      	ldrh	r3, [r3, #24]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	429a      	cmp	r2, r3
 8001894:	d22e      	bcs.n	80018f4 <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8a1b      	ldrh	r3, [r3, #16]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0412      	lsls	r2, r2, #16
 80018a2:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 80018a4:	897b      	ldrh	r3, [r7, #10]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b298      	uxth	r0, r3
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	893a      	ldrh	r2, [r7, #8]
 80018b2:	8979      	ldrh	r1, [r7, #10]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7ff fdf3 	bl	80014a4 <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8a5a      	ldrh	r2, [r3, #18]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	753b      	strb	r3, [r7, #20]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f107 0114 	add.w	r1, r7, #20
 80018e0:	2301      	movs	r3, #1
 80018e2:	2202      	movs	r2, #2
 80018e4:	f003 f9b1 	bl	8004c4a <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8a1a      	ldrh	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	619a      	str	r2, [r3, #24]
 80018f2:	e000      	b.n	80018f6 <ILI9341_DrawPixel+0x8e>
		return;
 80018f4:	bf00      	nop
}
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 80018fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001900:	b08f      	sub	sp, #60	@ 0x3c
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	460b      	mov	r3, r1
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	817b      	strh	r3, [r7, #10]
 800190c:	466b      	mov	r3, sp
 800190e:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8a5a      	ldrh	r2, [r3, #18]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001926:	d202      	bcs.n	800192e <ILI9341_Fill+0x32>
		buffer_size = size;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
 800192c:	e002      	b.n	8001934 <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 800192e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29b      	uxth	r3, r3
 800193a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 800193e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001940:	460b      	mov	r3, r1
 8001942:	3b01      	subs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
 8001946:	2300      	movs	r3, #0
 8001948:	4688      	mov	r8, r1
 800194a:	4699      	mov	r9, r3
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001958:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001960:	2300      	movs	r3, #0
 8001962:	460c      	mov	r4, r1
 8001964:	461d      	mov	r5, r3
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	00eb      	lsls	r3, r5, #3
 8001970:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001974:	00e2      	lsls	r2, r4, #3
 8001976:	1dcb      	adds	r3, r1, #7
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	ebad 0d03 	sub.w	sp, sp, r3
 8001980:	466b      	mov	r3, sp
 8001982:	3300      	adds	r3, #0
 8001984:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	@ 0x30
 800198a:	e00e      	b.n	80019aa <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	4413      	add	r3, r2
 8001992:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001996:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199a:	3301      	adds	r3, #1
 800199c:	897a      	ldrh	r2, [r7, #10]
 800199e:	b2d1      	uxtb	r1, r2
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 80019a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a6:	3302      	adds	r3, #2
 80019a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3ec      	bcc.n	800198c <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80019ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019cc:	fb01 f202 	mul.w	r2, r1, r2
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d011      	beq.n	80019fe <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019de:	e00a      	b.n	80019f6 <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	230a      	movs	r3, #10
 80019ea:	6a39      	ldr	r1, [r7, #32]
 80019ec:	f003 f92d 	bl	8004c4a <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	3301      	adds	r3, #1
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3f0      	bcc.n	80019e0 <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	230a      	movs	r3, #10
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	f003 f91e 	bl	8004c4a <HAL_SPI_Transmit>
 8001a0e:	46b5      	mov	sp, r6
}
 8001a10:	bf00      	nop
 8001a12:	373c      	adds	r7, #60	@ 0x3c
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a1a <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8a1b      	ldrh	r3, [r3, #16]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0412      	lsls	r2, r2, #16
 8001a32:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	8adb      	ldrh	r3, [r3, #22]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8b1b      	ldrh	r3, [r3, #24]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fd29 	bl	80014a4 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8adb      	ldrh	r3, [r3, #22]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8b1b      	ldrh	r3, [r3, #24]
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff48 	bl	80018fc <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	8a1a      	ldrh	r2, [r3, #16]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af02      	add	r7, sp, #8
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	4608      	mov	r0, r1
 8001a88:	4611      	mov	r1, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	460b      	mov	r3, r1
 8001a92:	813b      	strh	r3, [r7, #8]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8adb      	ldrh	r3, [r3, #22]
 8001a9c:	897a      	ldrh	r2, [r7, #10]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d246      	bcs.n	8001b30 <ILI9341_FillRectangle+0xb2>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8b1b      	ldrh	r3, [r3, #24]
 8001aa6:	893a      	ldrh	r2, [r7, #8]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d241      	bcs.n	8001b30 <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001aac:	897a      	ldrh	r2, [r7, #10]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	8ad2      	ldrh	r2, [r2, #22]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	dd04      	ble.n	8001ac4 <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8ada      	ldrh	r2, [r3, #22]
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001ac4:	893a      	ldrh	r2, [r7, #8]
 8001ac6:	8b3b      	ldrh	r3, [r7, #24]
 8001ac8:	4413      	add	r3, r2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	8b12      	ldrh	r2, [r2, #24]
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	dd04      	ble.n	8001adc <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8b1a      	ldrh	r2, [r3, #24]
 8001ad6:	893b      	ldrh	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8a1b      	ldrh	r3, [r3, #16]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	0412      	lsls	r2, r2, #16
 8001ae8:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001aea:	897a      	ldrh	r2, [r7, #10]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b298      	uxth	r0, r3
 8001af6:	893a      	ldrh	r2, [r7, #8]
 8001af8:	8b3b      	ldrh	r3, [r7, #24]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	893a      	ldrh	r2, [r7, #8]
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fcca 	bl	80014a4 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	8b3a      	ldrh	r2, [r7, #24]
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	8bbb      	ldrh	r3, [r7, #28]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff feec 	bl	80018fc <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8a1a      	ldrh	r2, [r3, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
 8001b2e:	e000      	b.n	8001b32 <ILI9341_FillRectangle+0xb4>
		return;
 8001b30:	bf00      	nop
}
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ILI9341_WriteChar>:
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
}

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	817b      	strh	r3, [r7, #10]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	813b      	strh	r3, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8001b52:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b56:	461a      	mov	r2, r3
 8001b58:	897b      	ldrh	r3, [r7, #10]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b298      	uxth	r0, r3
 8001b62:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001b66:	461a      	mov	r2, r3
 8001b68:	893b      	ldrh	r3, [r7, #8]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	893a      	ldrh	r2, [r7, #8]
 8001b74:	8979      	ldrh	r1, [r7, #10]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7ff fc92 	bl	80014a4 <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b84:	e043      	b.n	8001c0e <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8001b86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	3b20      	subs	r3, #32
 8001b8c:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	440b      	add	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	e029      	b.n	8001bfc <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00f      	beq.n	8001bd8 <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001bb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	763b      	strb	r3, [r7, #24]
 8001bc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fc3d 	bl	8001450 <ILI9341_WriteBuffer>
 8001bd6:	e00e      	b.n	8001bf6 <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001bd8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	753b      	strb	r3, [r7, #20]
 8001be2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2202      	movs	r2, #2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fc2d 	bl	8001450 <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c00:	461a      	mov	r2, r3
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d3cf      	bcc.n	8001ba8 <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001c12:	461a      	mov	r2, r3
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d3b5      	bcc.n	8001b86 <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	4613      	mov	r3, r2
 8001c34:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8a1b      	ldrh	r3, [r3, #16]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	619a      	str	r2, [r3, #24]

    while (*str) {
 8001c44:	e03b      	b.n	8001cbe <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	8ad2      	ldrh	r2, [r2, #22]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	db17      	blt.n	8001c86 <ILI9341_WriteString+0x62>
            x = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	817b      	strh	r3, [r7, #10]
            y += font.height;
 8001c5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001c5e:	461a      	mov	r2, r3
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 8001c66:	893b      	ldrh	r3, [r7, #8]
 8001c68:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001c6c:	4413      	add	r3, r2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	8b12      	ldrh	r2, [r2, #24]
 8001c72:	4293      	cmp	r3, r2
 8001c74:	da28      	bge.n	8001cc8 <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d103      	bne.n	8001c86 <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3301      	adds	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
                continue;
 8001c84:	e01b      	b.n	8001cbe <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781d      	ldrb	r5, [r3, #0]
 8001c8a:	893a      	ldrh	r2, [r7, #8]
 8001c8c:	897c      	ldrh	r4, [r7, #10]
 8001c8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	466b      	mov	r3, sp
 8001c98:	f107 0120 	add.w	r1, r7, #32
 8001c9c:	c903      	ldmia	r1, {r0, r1}
 8001c9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff ff46 	bl	8001b38 <ILI9341_WriteChar>
        x += font.width;
 8001cac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	897b      	ldrh	r3, [r7, #10]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	817b      	strh	r3, [r7, #10]
        str++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1bf      	bne.n	8001c46 <ILI9341_WriteString+0x22>
 8001cc6:	e000      	b.n	8001cca <ILI9341_WriteString+0xa6>
                break;
 8001cc8:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8a1a      	ldrh	r2, [r3, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}

08001cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0c4      	sub	sp, #272	@ 0x110
 8001ce0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce2:	f000 ff2f 	bl	8002b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce6:	f000 f86d 	bl	8001dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cea:	f000 f9d5 	bl	8002098 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cee:	f000 f9b3 	bl	8002058 <MX_DMA_Init>
  MX_SPI1_Init();
 8001cf2:	f000 f917 	bl	8001f24 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001cf6:	f000 f8c3 	bl	8001e80 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001cfa:	f000 f949 	bl	8001f90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Display init
  display.spi             = &hspi1;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <main+0xc8>)
 8001d00:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <main+0xcc>)
 8001d02:	601a      	str	r2, [r3, #0]
  display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <main+0xc8>)
 8001d06:	4a29      	ldr	r2, [pc, #164]	@ (8001dac <main+0xd0>)
 8001d08:	605a      	str	r2, [r3, #4]
  display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <main+0xc8>)
 8001d0c:	4a27      	ldr	r2, [pc, #156]	@ (8001dac <main+0xd0>)
 8001d0e:	609a      	str	r2, [r3, #8]
  display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8001d10:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <main+0xc8>)
 8001d12:	4a26      	ldr	r2, [pc, #152]	@ (8001dac <main+0xd0>)
 8001d14:	60da      	str	r2, [r3, #12]
  display.cs_pin          = ILI9341_CS_Pin;
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <main+0xc8>)
 8001d18:	2210      	movs	r2, #16
 8001d1a:	821a      	strh	r2, [r3, #16]
  display.dc_pin          = ILI9341_DC_Pin;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <main+0xc8>)
 8001d1e:	2208      	movs	r2, #8
 8001d20:	825a      	strh	r2, [r3, #18]
  display.reset_pin       = ILI9341_RESET_Pin;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <main+0xc8>)
 8001d24:	2204      	movs	r2, #4
 8001d26:	829a      	strh	r2, [r3, #20]
  display.width           = 320;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <main+0xc8>)
 8001d2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d2e:	82da      	strh	r2, [r3, #22]
  display.height          = 240;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <main+0xc8>)
 8001d32:	22f0      	movs	r2, #240	@ 0xf0
 8001d34:	831a      	strh	r2, [r3, #24]
  display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <main+0xc8>)
 8001d38:	22e8      	movs	r2, #232	@ 0xe8
 8001d3a:	769a      	strb	r2, [r3, #26]

   ILI9341_UNSELECT(&display);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <main+0xc8>)
 8001d3e:	8a1a      	ldrh	r2, [r3, #16]
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <main+0xc8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	619a      	str	r2, [r3, #24]
   ILI9341_Init(&display);
 8001d46:	4817      	ldr	r0, [pc, #92]	@ (8001da4 <main+0xc8>)
 8001d48:	f7ff fc1a 	bl	8001580 <ILI9341_Init>
   char string[255];

   ILI9341_FillScreen(&display, ILI9341_BLUE);
 8001d4c:	211f      	movs	r1, #31
 8001d4e:	4815      	ldr	r0, [pc, #84]	@ (8001da4 <main+0xc8>)
 8001d50:	f7ff fe63 	bl	8001a1a <ILI9341_FillScreen>
   snprintf(string, 255, "Guitar Tuner");
 8001d54:	463b      	mov	r3, r7
 8001d56:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <main+0xd4>)
 8001d58:	21ff      	movs	r1, #255	@ 0xff
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fd6a 	bl	8005834 <sniprintf>
   ILI9341_WriteString(&display, 60, 18 * 0, string, Font_16x26, ILI9341_GREEN, ILI9341_BLUE);
 8001d60:	463b      	mov	r3, r7
 8001d62:	221f      	movs	r2, #31
 8001d64:	9203      	str	r2, [sp, #12]
 8001d66:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d6a:	9202      	str	r2, [sp, #8]
 8001d6c:	4911      	ldr	r1, [pc, #68]	@ (8001db4 <main+0xd8>)
 8001d6e:	466a      	mov	r2, sp
 8001d70:	c903      	ldmia	r1, {r0, r1}
 8001d72:	e882 0003 	stmia.w	r2, {r0, r1}
 8001d76:	2200      	movs	r2, #0
 8001d78:	213c      	movs	r1, #60	@ 0x3c
 8001d7a:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <main+0xc8>)
 8001d7c:	f7ff ff52 	bl	8001c24 <ILI9341_WriteString>
   drawAxis(&display);
 8001d80:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <main+0xc8>)
 8001d82:	f000 fc95 	bl	80026b0 <drawAxis>
   HAL_Delay(1000);
 8001d86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d8a:	f000 ff4d 	bl	8002c28 <HAL_Delay>

   // Start the timer before starting ADC
   HAL_TIM_Base_Start(&htim2);
 8001d8e:	480a      	ldr	r0, [pc, #40]	@ (8001db8 <main+0xdc>)
 8001d90:	f003 f9cc 	bl	800512c <HAL_TIM_Base_Start>

   // Start ADC with DMA
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8001d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d98:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <main+0xe0>)
 8001d9a:	4809      	ldr	r0, [pc, #36]	@ (8001dc0 <main+0xe4>)
 8001d9c:	f001 f8bc 	bl	8002f18 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <main+0xc4>
 8001da4:	20000584 	.word	0x20000584
 8001da8:	200004e4 	.word	0x200004e4
 8001dac:	40020000 	.word	0x40020000
 8001db0:	080074b0 	.word	0x080074b0
 8001db4:	20000000 	.word	0x20000000
 8001db8:	2000053c 	.word	0x2000053c
 8001dbc:	200005a0 	.word	0x200005a0
 8001dc0:	2000043c 	.word	0x2000043c

08001dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	@ 0x50
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	2230      	movs	r2, #48	@ 0x30
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fd64 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <SystemClock_Config+0xb4>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <SystemClock_Config+0xb4>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <SystemClock_Config+0xb4>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <SystemClock_Config+0xb8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <SystemClock_Config+0xb8>)
 8001e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <SystemClock_Config+0xb8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 fa5b 	bl	80042f0 <HAL_RCC_OscConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001e40:	f000 fcb3 	bl	80027aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 fcbe 	bl	80047e0 <HAL_RCC_ClockConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e6a:	f000 fc9e 	bl	80027aa <Error_Handler>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3750      	adds	r7, #80	@ 0x50
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */


  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001e94:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <MX_ADC1_Init+0xa0>)
 8001e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e98:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ec2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001ee4:	f000 fec4 	bl	8002c70 <HAL_ADC_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001eee:	f000 fc5c 	bl	80027aa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <MX_ADC1_Init+0x9c>)
 8001f04:	f001 f91a 	bl	800313c <HAL_ADC_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001f0e:	f000 fc4c 	bl	80027aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000043c 	.word	0x2000043c
 8001f20:	40012000 	.word	0x40012000

08001f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f2a:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <MX_SPI1_Init+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f70:	220a      	movs	r2, #10
 8001f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_SPI1_Init+0x64>)
 8001f76:	f002 fddf 	bl	8004b38 <HAL_SPI_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f80:	f000 fc13 	bl	80027aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200004e4 	.word	0x200004e4
 8001f8c:	40013000 	.word	0x40013000

08001f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	@ 0x30
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fc6:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fd4:	2209      	movs	r2, #9
 8001fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe4:	481b      	ldr	r0, [pc, #108]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8001fe6:	f003 f851 	bl	800508c <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001ff0:	f000 fbdb 	bl	80027aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4619      	mov	r1, r3
 8002000:	4814      	ldr	r0, [pc, #80]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8002002:	f003 f8ed 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800200c:	f000 fbcd 	bl	80027aa <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_TIM2_Init+0xc4>)
 8002020:	f003 f9a5 	bl	800536e <HAL_TIM_SlaveConfigSynchro>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800202a:	f000 fbbe 	bl	80027aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800202e:	2320      	movs	r3, #32
 8002030:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	@ (8002054 <MX_TIM2_Init+0xc4>)
 800203c:	f003 fb8c 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002046:	f000 fbb0 	bl	80027aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	@ 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000053c 	.word	0x2000053c

08002058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_DMA_Init+0x3c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <MX_DMA_Init+0x3c>)
 8002068:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_DMA_Init+0x3c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2038      	movs	r0, #56	@ 0x38
 8002080:	f001 fbf1 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002084:	2038      	movs	r0, #56	@ 0x38
 8002086:	f001 fc0a 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	4b22      	ldr	r3, [pc, #136]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <MX_GPIO_Init+0xa4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2102      	movs	r1, #2
 80020ea:	4815      	ldr	r0, [pc, #84]	@ (8002140 <MX_GPIO_Init+0xa8>)
 80020ec:	f002 f8e6 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ILI9341_RESET_Pin|ILI9341_DC_Pin|ILI9341_CS_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	211c      	movs	r1, #28
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <MX_GPIO_Init+0xa8>)
 80020f6:	f002 f8e1 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILI9341_LED_Pin */
  GPIO_InitStruct.Pin = ILI9341_LED_Pin;
 80020fa:	2302      	movs	r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ILI9341_LED_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	480b      	ldr	r0, [pc, #44]	@ (8002140 <MX_GPIO_Init+0xa8>)
 8002112:	f001 ff4f 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_RESET_Pin ILI9341_DC_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_RESET_Pin|ILI9341_DC_Pin|ILI9341_CS_Pin;
 8002116:	231c      	movs	r3, #28
 8002118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211a:	2301      	movs	r3, #1
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	4619      	mov	r1, r3
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <MX_GPIO_Init+0xa8>)
 800212e:	f001 ff41 	bl	8003fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002132:	bf00      	nop
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002144:	b580      	push	{r7, lr}
 8002146:	f5ad 5dcb 	sub.w	sp, sp, #6496	@ 0x1960
 800214a:	af04      	add	r7, sp, #16
 800214c:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002150:	f6a3 134c 	subw	r3, r3, #2380	@ 0x94c
 8002154:	6018      	str	r0, [r3, #0]
    float top_freq;
    float mag[ADC_BUFFER_SIZE];
    float freq[ADC_BUFFER_SIZE];
    complex fft_samples[ADC_BUFFER_SIZE], temp[ADC_BUFFER_SIZE];

    int j=0;
 8002156:	2300      	movs	r3, #0
 8002158:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 800215c:	f102 020c 	add.w	r2, r2, #12
 8002160:	6013      	str	r3, [r2, #0]
	for(j=0; j<ADC_BUFFER_SIZE; j++){
 8002162:	2300      	movs	r3, #0
 8002164:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 8002168:	f102 020c 	add.w	r2, r2, #12
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e032      	b.n	80021d6 <HAL_ADC_ConvCpltCallback+0x92>
		fft_samples[j].Re=adc_buffer[j];
 8002170:	4a48      	ldr	r2, [pc, #288]	@ (8002294 <HAL_ADC_ConvCpltCallback+0x150>)
 8002172:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002176:	f103 030c 	add.w	r3, r3, #12
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002188:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 800218c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002190:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002194:	f103 030c 	add.w	r3, r3, #12
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	edc3 7a00 	vstr	s15, [r3]
		fft_samples[j].Im=0;
 80021a2:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 80021a6:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80021aa:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80021ae:	f103 030c 	add.w	r3, r3, #12
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
	for(j=0; j<ADC_BUFFER_SIZE; j++){
 80021c0:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80021c4:	f103 030c 	add.w	r3, r3, #12
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 80021d0:	f102 020c 	add.w	r2, r2, #12
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80021da:	f103 030c 	add.w	r3, r3, #12
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2bff      	cmp	r3, #255	@ 0xff
 80021e2:	ddc5      	ble.n	8002170 <HAL_ADC_ConvCpltCallback+0x2c>
	}

		fft(fft_samples, ADC_BUFFER_SIZE, temp);
 80021e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80021e8:	3a04      	subs	r2, #4
 80021ea:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80021ee:	3b04      	subs	r3, #4
 80021f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe febf 	bl	8000f78 <fft>
    	get_freq_bins(freq, ADC_BUFFER_SIZE, 0.001);
 80021fa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80021fe:	f103 030c 	add.w	r3, r3, #12
 8002202:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002298 <HAL_ADC_ConvCpltCallback+0x154>
 8002206:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe ffec 	bl	80011e8 <get_freq_bins>
		get_magnitudes(mag, fft_samples, ADC_BUFFER_SIZE);
 8002210:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002214:	3b04      	subs	r3, #4
 8002216:	f507 50a1 	add.w	r0, r7, #5152	@ 0x1420
 800221a:	f100 000c 	add.w	r0, r0, #12
 800221e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff f855 	bl	80012d2 <get_magnitudes>
		filter_frequencies(mag, freq, 0.0, 4.0, ADC_BUFFER_SIZE);
 8002228:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800222c:	f101 010c 	add.w	r1, r1, #12
 8002230:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8002234:	f103 030c 	add.w	r3, r3, #12
 8002238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223c:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8002240:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800229c <HAL_ADC_ConvCpltCallback+0x158>
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f88b 	bl	8001360 <filter_frequencies>
		filter_frequencies(mag, freq, 60.0, 5.0, ADC_BUFFER_SIZE);
 800224a:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800224e:	f101 010c 	add.w	r1, r1, #12
 8002252:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8002256:	f103 030c 	add.w	r3, r3, #12
 800225a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800225e:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8002262:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80022a0 <HAL_ADC_ConvCpltCallback+0x15c>
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f87a 	bl	8001360 <filter_frequencies>
		#define D 2
		#define G 3
		#define B 4
		#define e 5
		int i;
		float dp[6] = {0};
 800226c:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002270:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002274:	461a      	mov	r2, r3
 8002276:	2300      	movs	r3, #0
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	6053      	str	r3, [r2, #4]
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	6113      	str	r3, [r2, #16]
 8002282:	6153      	str	r3, [r2, #20]
		for(i=0; i<UNIT_VEC_LENGTH; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 800228a:	f102 0208 	add.w	r2, r2, #8
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e134      	b.n	80024fc <HAL_ADC_ConvCpltCallback+0x3b8>
 8002292:	bf00      	nop
 8002294:	200005a0 	.word	0x200005a0
 8002298:	3a83126f 	.word	0x3a83126f
 800229c:	00000000 	.word	0x00000000
 80022a0:	42700000 	.word	0x42700000
		{
		float f = eigen_frequencies[i];
 80022a4:	4ade      	ldr	r2, [pc, #888]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x4dc>)
 80022a6:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80022aa:	f103 0308 	add.w	r3, r3, #8
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f507 52c9 	add.w	r2, r7, #6432	@ 0x1920
 80022ba:	f102 021c 	add.w	r2, r2, #28
 80022be:	6013      	str	r3, [r2, #0]
		int index = freq_to_index(f, 1000, ADC_BUFFER_SIZE);
 80022c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c8:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 80022cc:	f103 031c 	add.w	r3, r3, #28
 80022d0:	ed93 0a00 	vldr	s0, [r3]
 80022d4:	f7fe ffdc 	bl	8001290 <freq_to_index>
 80022d8:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 80022dc:	f103 0318 	add.w	r3, r3, #24
 80022e0:	6018      	str	r0, [r3, #0]
		dp[E] += E_fft_unit_vec[i] * mag[index];
 80022e2:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 80022e6:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	4acd      	ldr	r2, [pc, #820]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x4e0>)
 80022f0:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80022f4:	f103 0308 	add.w	r3, r3, #8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002306:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800230a:	f103 0310 	add.w	r3, r3, #16
 800230e:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002312:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 8002316:	f103 0318 	add.w	r3, r3, #24
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232c:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002330:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002334:	edc3 7a00 	vstr	s15, [r3]
		dp[A] += A_fft_unit_vec[i] * mag[index];
 8002338:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 800233c:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002340:	ed93 7a01 	vldr	s14, [r3, #4]
 8002344:	4ab8      	ldr	r2, [pc, #736]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x4e4>)
 8002346:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800234a:	f103 0308 	add.w	r3, r3, #8
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800235c:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002360:	f103 0310 	add.w	r3, r3, #16
 8002364:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002368:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 800236c:	f103 0318 	add.w	r3, r3, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002386:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 800238a:	edc3 7a01 	vstr	s15, [r3, #4]
		dp[D] += D_fft_unit_vec[i] * mag[index];
 800238e:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002392:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002396:	ed93 7a02 	vldr	s14, [r3, #8]
 800239a:	4aa4      	ldr	r2, [pc, #656]	@ (800262c <HAL_ADC_ConvCpltCallback+0x4e8>)
 800239c:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80023a0:	f103 0308 	add.w	r3, r3, #8
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023b2:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80023b6:	f103 0310 	add.w	r3, r3, #16
 80023ba:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80023be:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 80023c2:	f103 0318 	add.w	r3, r3, #24
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 80023dc:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 80023e0:	edc3 7a02 	vstr	s15, [r3, #8]
		dp[G] += G_fft_unit_vec[i] * mag[index];
 80023e4:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 80023e8:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 80023ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80023f0:	4a8f      	ldr	r2, [pc, #572]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x4ec>)
 80023f2:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80023f6:	f103 0308 	add.w	r3, r3, #8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002408:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800240c:	f103 0310 	add.w	r3, r3, #16
 8002410:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002414:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 8002418:	f103 0318 	add.w	r3, r3, #24
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242e:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002432:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002436:	edc3 7a03 	vstr	s15, [r3, #12]
		dp[B] += B_fft_unit_vec[i] * mag[index];
 800243a:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 800243e:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002442:	ed93 7a04 	vldr	s14, [r3, #16]
 8002446:	4a7b      	ldr	r2, [pc, #492]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x4f0>)
 8002448:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800244c:	f103 0308 	add.w	r3, r3, #8
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002462:	f103 0310 	add.w	r3, r3, #16
 8002466:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 800246a:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 800246e:	f103 0318 	add.w	r3, r3, #24
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002484:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002488:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 800248c:	edc3 7a04 	vstr	s15, [r3, #16]
		dp[e] += e_fft_unit_vec[i] * mag[index];
 8002490:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 8002494:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8002498:	ed93 7a05 	vldr	s14, [r3, #20]
 800249c:	4a66      	ldr	r2, [pc, #408]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x4f4>)
 800249e:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80024a2:	f103 0308 	add.w	r3, r3, #8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024b4:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80024b8:	f103 0310 	add.w	r3, r3, #16
 80024bc:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80024c0:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 80024c4:	f103 0318 	add.w	r3, r3, #24
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 80024de:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 80024e2:	edc3 7a05 	vstr	s15, [r3, #20]
		for(i=0; i<UNIT_VEC_LENGTH; i++)
 80024e6:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80024ea:	f103 0308 	add.w	r3, r3, #8
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 80024f6:	f102 0208 	add.w	r2, r2, #8
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002500:	f103 0308 	add.w	r3, r3, #8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b3a      	cmp	r3, #58	@ 0x3a
 8002508:	f77f aecc 	ble.w	80022a4 <HAL_ADC_ConvCpltCallback+0x160>
		}

		// find max string
		float max_val = 0.0;
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 8002514:	f102 0204 	add.w	r2, r2, #4
 8002518:	6013      	str	r3, [r2, #0]
		int max_index;
		char string_char[10];

		for(i=0; i<6; i++){
 800251a:	2300      	movs	r3, #0
 800251c:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 8002520:	f102 0208 	add.w	r2, r2, #8
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e03b      	b.n	80025a0 <HAL_ADC_ConvCpltCallback+0x45c>
			if(dp[i] > max_val){
 8002528:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 800252c:	f6a3 123c 	subw	r2, r3, #2364	@ 0x93c
 8002530:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002534:	f103 0308 	add.w	r3, r3, #8
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002546:	f103 0304 	add.w	r3, r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d518      	bpl.n	800258a <HAL_ADC_ConvCpltCallback+0x446>
				max_val = dp[i];
 8002558:	f507 6315 	add.w	r3, r7, #2384	@ 0x950
 800255c:	f6a3 123c 	subw	r2, r3, #2364	@ 0x93c
 8002560:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 8002564:	f103 0308 	add.w	r3, r3, #8
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 8002574:	f102 0204 	add.w	r2, r2, #4
 8002578:	6013      	str	r3, [r2, #0]
				max_index = i;
 800257a:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800257e:	f103 0308 	add.w	r3, r3, #8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 8002588:	6013      	str	r3, [r2, #0]
		for(i=0; i<6; i++){
 800258a:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 800258e:	f103 0308 	add.w	r3, r3, #8
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	f507 52ca 	add.w	r2, r7, #6464	@ 0x1940
 800259a:	f102 0208 	add.w	r2, r2, #8
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80025a4:	f103 0308 	add.w	r3, r3, #8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	ddbc      	ble.n	8002528 <HAL_ADC_ConvCpltCallback+0x3e4>
			}
		}


	    switch (max_index) {
 80025ae:	f507 53ca 	add.w	r3, r7, #6464	@ 0x1940
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d85b      	bhi.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
 80025b8:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <HAL_ADC_ConvCpltCallback+0x47c>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	080025d9 	.word	0x080025d9
 80025c4:	080025eb 	.word	0x080025eb
 80025c8:	080025fd 	.word	0x080025fd
 80025cc:	0800260f 	.word	0x0800260f
 80025d0:	0800264d 	.word	0x0800264d
 80025d4:	0800265f 	.word	0x0800265f
	        case 0:
	        	snprintf(string_char, 10, "E");  // 6ª corda (mais grossa)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	3b08      	subs	r3, #8
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_ADC_ConvCpltCallback+0x4f8>)
 80025e0:	210a      	movs	r1, #10
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 f926 	bl	8005834 <sniprintf>
	            break;
 80025e8:	e042      	b.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
	        case 1:
	        	snprintf(string_char, 10, "A");  // 5ª corda
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	3b08      	subs	r3, #8
 80025f0:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80025f2:	210a      	movs	r1, #10
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f91d 	bl	8005834 <sniprintf>
	            break;
 80025fa:	e039      	b.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
	        case 2:
	        	snprintf(string_char, 10, "D");  // 4ª corda
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	3b08      	subs	r3, #8
 8002602:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x500>)
 8002604:	210a      	movs	r1, #10
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f914 	bl	8005834 <sniprintf>
	            break;
 800260c:	e030      	b.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
	        case 3:
	        	snprintf(string_char, 10, "G");  // 3ª corda
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	3b08      	subs	r3, #8
 8002614:	4a0c      	ldr	r2, [pc, #48]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x504>)
 8002616:	210a      	movs	r1, #10
 8002618:	4618      	mov	r0, r3
 800261a:	f003 f90b 	bl	8005834 <sniprintf>
	            break;
 800261e:	e027      	b.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
 8002620:	20000008 	.word	0x20000008
 8002624:	200000f4 	.word	0x200000f4
 8002628:	2000016c 	.word	0x2000016c
 800262c:	200001e4 	.word	0x200001e4
 8002630:	2000025c 	.word	0x2000025c
 8002634:	200002d4 	.word	0x200002d4
 8002638:	2000034c 	.word	0x2000034c
 800263c:	080074c0 	.word	0x080074c0
 8002640:	080074c4 	.word	0x080074c4
 8002644:	080074c8 	.word	0x080074c8
 8002648:	080074cc 	.word	0x080074cc
	        case 4:
	        	snprintf(string_char, 10, "B");  // 2ª corda
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	3b08      	subs	r3, #8
 8002652:	4a13      	ldr	r2, [pc, #76]	@ (80026a0 <HAL_ADC_ConvCpltCallback+0x55c>)
 8002654:	210a      	movs	r1, #10
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f8ec 	bl	8005834 <sniprintf>
	            break;
 800265c:	e008      	b.n	8002670 <HAL_ADC_ConvCpltCallback+0x52c>
	        case 5:
	        	snprintf(string_char, 10, "e");  // 1ª corda (mais fina)
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	3b08      	subs	r3, #8
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_ADC_ConvCpltCallback+0x560>)
 8002666:	210a      	movs	r1, #10
 8002668:	4618      	mov	r0, r3
 800266a:	f003 f8e3 	bl	8005834 <sniprintf>
	            break;
 800266e:	bf00      	nop
	    }
		ILI9341_WriteString(&display, 60, 18 * 5, string_char, Font_16x26, ILI9341_GREEN, ILI9341_BLUE);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	3b08      	subs	r3, #8
 8002676:	221f      	movs	r2, #31
 8002678:	9203      	str	r2, [sp, #12]
 800267a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800267e:	9202      	str	r2, [sp, #8]
 8002680:	4909      	ldr	r1, [pc, #36]	@ (80026a8 <HAL_ADC_ConvCpltCallback+0x564>)
 8002682:	466a      	mov	r2, sp
 8002684:	c903      	ldmia	r1, {r0, r1}
 8002686:	e882 0003 	stmia.w	r2, {r0, r1}
 800268a:	225a      	movs	r2, #90	@ 0x5a
 800268c:	213c      	movs	r1, #60	@ 0x3c
 800268e:	4807      	ldr	r0, [pc, #28]	@ (80026ac <HAL_ADC_ConvCpltCallback+0x568>)
 8002690:	f7ff fac8 	bl	8001c24 <ILI9341_WriteString>
}
 8002694:	bf00      	nop
 8002696:	f507 57ca 	add.w	r7, r7, #6464	@ 0x1940
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080074d0 	.word	0x080074d0
 80026a4:	080074d4 	.word	0x080074d4
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000584 	.word	0x20000584

080026b0 <drawAxis>:
		pixel_dirty[i][1] = pixel[i][1];
	}
}

static void drawAxis(ILI9341TypeDef *display)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	82fb      	strh	r3, [r7, #22]
 80026bc:	e034      	b.n	8002728 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	461a      	mov	r2, r3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	461a      	mov	r2, r3
 80026c8:	0091      	lsls	r1, r2, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	460b      	mov	r3, r1
 80026ce:	4413      	add	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3314      	adds	r3, #20
 80026d4:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 80026d6:	8afb      	ldrh	r3, [r7, #22]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <drawAxis+0x32>
 80026dc:	8afb      	ldrh	r3, [r7, #22]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d10c      	bne.n	80026fc <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 80026e2:	89ba      	ldrh	r2, [r7, #12]
 80026e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2301      	movs	r3, #1
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f44f 738a 	mov.w	r3, #276	@ 0x114
 80026f2:	2114      	movs	r1, #20
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff f9c2 	bl	8001a7e <ILI9341_FillRectangle>
			continue;
 80026fa:	e012      	b.n	8002722 <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 80026fc:	2300      	movs	r3, #0
 80026fe:	82bb      	strh	r3, [r7, #20]
 8002700:	e00b      	b.n	800271a <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002702:	8abb      	ldrh	r3, [r7, #20]
 8002704:	3314      	adds	r3, #20
 8002706:	b299      	uxth	r1, r3
 8002708:	89ba      	ldrh	r2, [r7, #12]
 800270a:	f245 238a 	movw	r3, #21130	@ 0x528a
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff f8aa 	bl	8001868 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002714:	8abb      	ldrh	r3, [r7, #20]
 8002716:	3302      	adds	r3, #2
 8002718:	82bb      	strh	r3, [r7, #20]
 800271a:	8abb      	ldrh	r3, [r7, #20]
 800271c:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002720:	d3ef      	bcc.n	8002702 <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	3301      	adds	r3, #1
 8002726:	82fb      	strh	r3, [r7, #22]
 8002728:	8afb      	ldrh	r3, [r7, #22]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d9c7      	bls.n	80026be <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 800272e:	2300      	movs	r3, #0
 8002730:	827b      	strh	r3, [r7, #18]
 8002732:	e032      	b.n	800279a <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8002734:	8a7b      	ldrh	r3, [r7, #18]
 8002736:	461a      	mov	r2, r3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4413      	add	r3, r2
 800273c:	461a      	mov	r2, r3
 800273e:	0091      	lsls	r1, r2, #2
 8002740:	461a      	mov	r2, r3
 8002742:	460b      	mov	r3, r1
 8002744:	4413      	add	r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	3314      	adds	r3, #20
 800274a:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 800274c:	8a7b      	ldrh	r3, [r7, #18]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <drawAxis+0xa8>
 8002752:	8a7b      	ldrh	r3, [r7, #18]
 8002754:	2b0b      	cmp	r3, #11
 8002756:	d10b      	bne.n	8002770 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002758:	89f9      	ldrh	r1, [r7, #14]
 800275a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	23c8      	movs	r3, #200	@ 0xc8
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	2214      	movs	r2, #20
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff f988 	bl	8001a7e <ILI9341_FillRectangle>
			continue;
 800276e:	e011      	b.n	8002794 <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002770:	2300      	movs	r3, #0
 8002772:	823b      	strh	r3, [r7, #16]
 8002774:	e00b      	b.n	800278e <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8002776:	8a3b      	ldrh	r3, [r7, #16]
 8002778:	3314      	adds	r3, #20
 800277a:	b29a      	uxth	r2, r3
 800277c:	89f9      	ldrh	r1, [r7, #14]
 800277e:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff f870 	bl	8001868 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8002788:	8a3b      	ldrh	r3, [r7, #16]
 800278a:	3302      	adds	r3, #2
 800278c:	823b      	strh	r3, [r7, #16]
 800278e:	8a3b      	ldrh	r3, [r7, #16]
 8002790:	2bc7      	cmp	r3, #199	@ 0xc7
 8002792:	d9f0      	bls.n	8002776 <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	3301      	adds	r3, #1
 8002798:	827b      	strh	r3, [r7, #18]
 800279a:	8a7b      	ldrh	r3, [r7, #18]
 800279c:	2b0b      	cmp	r3, #11
 800279e:	d9c9      	bls.n	8002734 <drawAxis+0x84>
	}
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ae:	b672      	cpsid	i
}
 80027b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <Error_Handler+0x8>
	...

080027b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002804 <HAL_MspInit+0x4c>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_MspInit+0x4c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <HAL_MspInit+0x4c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <HAL_ADC_MspInit+0xec>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d160      	bne.n	80028ec <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a2a      	ldr	r2, [pc, #168]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <HAL_ADC_MspInit+0xf0>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002862:	2301      	movs	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4821      	ldr	r0, [pc, #132]	@ (80028fc <HAL_ADC_MspInit+0xf4>)
 8002876:	f001 fb9d 	bl	8003fb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800287a:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 800287c:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <HAL_ADC_MspInit+0xfc>)
 800287e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002886:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800288c:	4b1c      	ldr	r3, [pc, #112]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 8002894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002898:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 800289c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c0:	480f      	ldr	r0, [pc, #60]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028c2:	f001 f807 	bl	80038d4 <HAL_DMA_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80028cc:	f7ff ff6d 	bl	80027aa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <HAL_ADC_MspInit+0xf8>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	2012      	movs	r0, #18
 80028e2:	f000 ffc0 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80028e6:	2012      	movs	r0, #18
 80028e8:	f000 ffd9 	bl	800389e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012000 	.word	0x40012000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020400 	.word	0x40020400
 8002900:	20000484 	.word	0x20000484
 8002904:	40026410 	.word	0x40026410

08002908 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_SPI_MspInit+0x84>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12b      	bne.n	8002982 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002938:	6453      	str	r3, [r2, #68]	@ 0x44
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a10      	ldr	r2, [pc, #64]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002962:	23e0      	movs	r3, #224	@ 0xe0
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002972:	2305      	movs	r3, #5
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	@ (8002994 <HAL_SPI_MspInit+0x8c>)
 800297e:	f001 fb19 	bl	8003fb4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002982:	bf00      	nop
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40013000 	.word	0x40013000
 8002990:	40023800 	.word	0x40023800
 8002994:	40020000 	.word	0x40020000

08002998 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a8:	d10d      	bne.n	80029c6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_TIM_Base_MspInit+0x3c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_TIM_Base_MspInit+0x3c>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_TIM_Base_MspInit+0x3c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <NMI_Handler+0x4>

080029e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <HardFault_Handler+0x4>

080029e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <MemManage_Handler+0x4>

080029f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <BusFault_Handler+0x4>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <UsageFault_Handler+0x4>

08002a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2e:	f000 f8db 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	@ (8002a48 <ADC_IRQHandler+0x10>)
 8002a3e:	f000 f95a 	bl	8002cf6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000043c 	.word	0x2000043c

08002a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <DMA2_Stream0_IRQHandler+0x10>)
 8002a52:	f001 f845 	bl	8003ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000484 	.word	0x20000484

08002a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <_sbrk+0x5c>)
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <_sbrk+0x60>)
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <_sbrk+0x64>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <_sbrk+0x68>)
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a82:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d207      	bcs.n	8002aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a90:	f002 ff0e 	bl	80058b0 <__errno>
 8002a94:	4603      	mov	r3, r0
 8002a96:	220c      	movs	r2, #12
 8002a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e009      	b.n	8002ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <_sbrk+0x64>)
 8002ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20020000 	.word	0x20020000
 8002ac0:	00000400 	.word	0x00000400
 8002ac4:	200007a0 	.word	0x200007a0
 8002ac8:	200008f0 	.word	0x200008f0

08002acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <SystemInit+0x20>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	4a05      	ldr	r2, [pc, #20]	@ (8002aec <SystemInit+0x20>)
 8002ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002af4:	f7ff ffea 	bl	8002acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af8:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002afa:	490d      	ldr	r1, [pc, #52]	@ (8002b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002afc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b00:	e002      	b.n	8002b08 <LoopCopyDataInit>

08002b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b06:	3304      	adds	r3, #4

08002b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b0c:	d3f9      	bcc.n	8002b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b10:	4c0a      	ldr	r4, [pc, #40]	@ (8002b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b14:	e001      	b.n	8002b1a <LoopFillZerobss>

08002b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b18:	3204      	adds	r2, #4

08002b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b1c:	d3fb      	bcc.n	8002b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b1e:	f002 fecd 	bl	80058bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b22:	f7ff f8db 	bl	8001cdc <main>
  bx  lr    
 8002b26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b30:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8002b34:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 8002b38:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8002b3c:	200008f0 	.word	0x200008f0

08002b40 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b40:	e7fe      	b.n	8002b40 <DMA1_Stream0_IRQHandler>
	...

08002b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <HAL_Init+0x40>)
 8002b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_Init+0x40>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_Init+0x40>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 fe6f 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	200f      	movs	r0, #15
 8002b74:	f000 f808 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7ff fe1e 	bl	80027b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_InitTick+0x54>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_InitTick+0x58>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fe87 	bl	80038ba <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00e      	b.n	8002bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d80a      	bhi.n	8002bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 fe4f 	bl	8003866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	@ (8002be4 <HAL_InitTick+0x5c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200003c4 	.word	0x200003c4
 8002be0:	200003cc 	.word	0x200003cc
 8002be4:	200003c8 	.word	0x200003c8

08002be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x20>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_IncTick+0x24>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <HAL_IncTick+0x24>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200003cc 	.word	0x200003cc
 8002c0c:	200007a4 	.word	0x200007a4

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	200007a4 	.word	0x200007a4

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffde 	bl	8002c10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200003cc 	.word	0x200003cc

08002c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e033      	b.n	8002cee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fdba 	bl	8002808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cb6:	f023 0302 	bic.w	r3, r3, #2
 8002cba:	f043 0202 	orr.w	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fb6c 	bl	80033a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cde:	e001      	b.n	8002ce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d049      	beq.n	8002dc0 <HAL_ADC_IRQHandler+0xca>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d046      	beq.n	8002dc0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d12b      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d127      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d119      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff f9c7 	bl	8002144 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0212 	mvn.w	r2, #18
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d057      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x190>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d054      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d139      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d124      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11d      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e50:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fc10 	bl	800369c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 020c 	mvn.w	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x1d6>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d014      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f929 	bl	8003114 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0201 	mvn.w	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eda:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x218>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f043 0202 	orr.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f912 	bl	8003128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	601a      	str	r2, [r3, #0]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Start_DMA+0x22>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0d0      	b.n	80030dc <HAL_ADC_Start_DMA+0x1c4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d018      	beq.n	8002f82 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f60:	4b60      	ldr	r3, [pc, #384]	@ (80030e4 <HAL_ADC_Start_DMA+0x1cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a60      	ldr	r2, [pc, #384]	@ (80030e8 <HAL_ADC_Start_DMA+0x1d0>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9a      	lsrs	r2, r3, #18
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f9      	bne.n	8002f76 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f90:	d107      	bne.n	8002fa2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 8088 	bne.w	80030c2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fdc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	f023 0206 	bic.w	r2, r3, #6
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300e:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <HAL_ADC_Start_DMA+0x1d4>)
 8003010:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	4a36      	ldr	r2, [pc, #216]	@ (80030f0 <HAL_ADC_Start_DMA+0x1d8>)
 8003018:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	4a35      	ldr	r2, [pc, #212]	@ (80030f4 <HAL_ADC_Start_DMA+0x1dc>)
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4a34      	ldr	r2, [pc, #208]	@ (80030f8 <HAL_ADC_Start_DMA+0x1e0>)
 8003028:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003032:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003042:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003052:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	334c      	adds	r3, #76	@ 0x4c
 800305e:	4619      	mov	r1, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f000 fce4 	bl	8003a30 <HAL_DMA_Start_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10f      	bne.n	8003098 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d129      	bne.n	80030da <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	e020      	b.n	80030da <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_ADC_Start_DMA+0x1e4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d11b      	bne.n	80030da <HAL_ADC_Start_DMA+0x1c2>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d114      	bne.n	80030da <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e00b      	b.n	80030da <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80030da:	7ffb      	ldrb	r3, [r7, #31]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200003c4 	.word	0x200003c4
 80030e8:	431bde83 	.word	0x431bde83
 80030ec:	40012300 	.word	0x40012300
 80030f0:	08003599 	.word	0x08003599
 80030f4:	08003653 	.word	0x08003653
 80030f8:	0800366f 	.word	0x0800366f
 80030fc:	40012000 	.word	0x40012000

08003100 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1c>
 8003154:	2302      	movs	r3, #2
 8003156:	e113      	b.n	8003380 <HAL_ADC_ConfigChannel+0x244>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d925      	bls.n	80031b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	3b1e      	subs	r3, #30
 800317e:	2207      	movs	r2, #7
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43da      	mvns	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	400a      	ands	r2, r1
 800318c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	4603      	mov	r3, r0
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4403      	add	r3, r0
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	e022      	b.n	80031fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	2207      	movs	r2, #7
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4403      	add	r3, r0
 80031f0:	409a      	lsls	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d824      	bhi.n	800324c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b05      	subs	r3, #5
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b05      	subs	r3, #5
 800323e:	fa00 f203 	lsl.w	r2, r0, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	635a      	str	r2, [r3, #52]	@ 0x34
 800324a:	e04c      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d824      	bhi.n	800329e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	3b23      	subs	r3, #35	@ 0x23
 8003266:	221f      	movs	r2, #31
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43da      	mvns	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	400a      	ands	r2, r1
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b23      	subs	r3, #35	@ 0x23
 8003290:	fa00 f203 	lsl.w	r2, r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
 800329c:	e023      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b41      	subs	r3, #65	@ 0x41
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b41      	subs	r3, #65	@ 0x41
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e6:	4b29      	ldr	r3, [pc, #164]	@ (800338c <HAL_ADC_ConfigChannel+0x250>)
 80032e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <HAL_ADC_ConfigChannel+0x254>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10f      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1d8>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d10b      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1d      	ldr	r2, [pc, #116]	@ (8003390 <HAL_ADC_ConfigChannel+0x254>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d12b      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x23a>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1c      	ldr	r2, [pc, #112]	@ (8003394 <HAL_ADC_ConfigChannel+0x258>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <HAL_ADC_ConfigChannel+0x1f4>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b11      	cmp	r3, #17
 800332e:	d122      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a11      	ldr	r2, [pc, #68]	@ (8003394 <HAL_ADC_ConfigChannel+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d111      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003352:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_ADC_ConfigChannel+0x25c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a11      	ldr	r2, [pc, #68]	@ (800339c <HAL_ADC_ConfigChannel+0x260>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	0c9a      	lsrs	r2, r3, #18
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003368:	e002      	b.n	8003370 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3b01      	subs	r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f9      	bne.n	800336a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012300 	.word	0x40012300
 8003390:	40012000 	.word	0x40012000
 8003394:	10000012 	.word	0x10000012
 8003398:	200003c4 	.word	0x200003c4
 800339c:	431bde83 	.word	0x431bde83

080033a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a8:	4b79      	ldr	r3, [pc, #484]	@ (8003590 <ADC_Init+0x1f0>)
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <ADC_Init+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	e00f      	b.n	800349e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800348c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0202 	bic.w	r2, r2, #2
 80034ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7e1b      	ldrb	r3, [r3, #24]
 80034b8:	005a      	lsls	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	3b01      	subs	r3, #1
 80034f8:	035a      	lsls	r2, r3, #13
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	e007      	b.n	8003514 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	3b01      	subs	r3, #1
 8003530:	051a      	lsls	r2, r3, #20
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003556:	025a      	lsls	r2, r3, #9
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	029a      	lsls	r2, r3, #10
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40012300 	.word	0x40012300
 8003594:	0f000001 	.word	0x0f000001

08003598 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d13c      	bne.n	800362c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d12b      	bne.n	8003624 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d127      	bne.n	8003624 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d119      	bne.n	8003624 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0220 	bic.w	r2, r2, #32
 80035fe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7fe fd8d 	bl	8002144 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800362a:	e00e      	b.n	800364a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fd75 	bl	8003128 <HAL_ADC_ErrorCallback>
}
 800363e:	e004      	b.n	800364a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fd4d 	bl	8003100 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2240      	movs	r2, #64	@ 0x40
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fd4a 	bl	8003128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	@ (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff3e 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff8e 	bl	80037a4 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff31 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffa2 	bl	800380c <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff f996 	bl	8002c10 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e099      	b.n	8003a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	e00f      	b.n	8003932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003912:	f7ff f97d 	bl	8002c10 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b05      	cmp	r3, #5
 800391e:	d908      	bls.n	8003932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e078      	b.n	8003a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4b38      	ldr	r3, [pc, #224]	@ (8003a2c <HAL_DMA_Init+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d117      	bne.n	80039f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa6f 	bl	8003ebc <DMA_CheckFifoParam>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa26 	bl	8003e50 <DMA_CalcBaseAndBitshift>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	223f      	movs	r2, #63	@ 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f010803f 	.word	0xf010803f

08003a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Start_IT+0x26>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e040      	b.n	8003ad8 <HAL_DMA_Start_IT+0xa8>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d12f      	bne.n	8003aca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9b8 	bl	8003df4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	223f      	movs	r2, #63	@ 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0216 	orr.w	r2, r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e005      	b.n	8003ad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aec:	4b8e      	ldr	r3, [pc, #568]	@ (8003d28 <HAL_DMA_IRQHandler+0x248>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a8e      	ldr	r2, [pc, #568]	@ (8003d2c <HAL_DMA_IRQHandler+0x24c>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	2208      	movs	r2, #8
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	2201      	movs	r2, #1
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d012      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	2204      	movs	r2, #4
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d012      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d043      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d03c      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	2210      	movs	r2, #16
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d018      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d024      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
 8003c0e:	e01f      	b.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
 8003c20:	e016      	b.n	8003c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0208 	bic.w	r2, r2, #8
 8003c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	2220      	movs	r2, #32
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 808f 	beq.w	8003d80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8087 	beq.w	8003d80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	2220      	movs	r2, #32
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d136      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0216 	bic.w	r2, r2, #22
 8003c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <HAL_DMA_IRQHandler+0x1da>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	223f      	movs	r2, #63	@ 0x3f
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07e      	beq.n	8003dec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
        }
        return;
 8003cf6:	e079      	b.n	8003dec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d031      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
 8003d24:	e02c      	b.n	8003d80 <HAL_DMA_IRQHandler+0x2a0>
 8003d26:	bf00      	nop
 8003d28:	200003c4 	.word	0x200003c4
 8003d2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d023      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
 8003d40:	e01e      	b.n	8003d80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0210 	bic.w	r2, r2, #16
 8003d5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d032      	beq.n	8003dee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d022      	beq.n	8003dda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2205      	movs	r2, #5
 8003d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d307      	bcc.n	8003dc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f2      	bne.n	8003dac <HAL_DMA_IRQHandler+0x2cc>
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
 8003dea:	e000      	b.n	8003dee <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dec:	bf00      	nop
    }
  }
}
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b40      	cmp	r3, #64	@ 0x40
 8003e20:	d108      	bne.n	8003e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e32:	e007      	b.n	8003e44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b10      	subs	r3, #16
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d909      	bls.n	8003e92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	1d1a      	adds	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e90:	e007      	b.n	8003ea2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	aaaaaaab 	.word	0xaaaaaaab
 8003eb8:	08008834 	.word	0x08008834

08003ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11f      	bne.n	8003f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d856      	bhi.n	8003f8a <DMA_CheckFifoParam+0xce>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <DMA_CheckFifoParam+0x28>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f07 	.word	0x08003f07
 8003eec:	08003ef5 	.word	0x08003ef5
 8003ef0:	08003f8b 	.word	0x08003f8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d046      	beq.n	8003f8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e043      	b.n	8003f8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f0e:	d140      	bne.n	8003f92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f14:	e03d      	b.n	8003f92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1e:	d121      	bne.n	8003f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d837      	bhi.n	8003f96 <DMA_CheckFifoParam+0xda>
 8003f26:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <DMA_CheckFifoParam+0x70>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f43 	.word	0x08003f43
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003f55 	.word	0x08003f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e030      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d025      	beq.n	8003f9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f52:	e022      	b.n	8003f9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f5c:	d11f      	bne.n	8003f9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f62:	e01c      	b.n	8003f9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d903      	bls.n	8003f72 <DMA_CheckFifoParam+0xb6>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d003      	beq.n	8003f78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f70:	e018      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      break;
 8003f76:	e015      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      break;
 8003f88:	e00b      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e00a      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e008      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
 8003f94:	e006      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e004      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e002      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e159      	b.n	8004284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	f040 8148 	bne.w	800427e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d005      	beq.n	8004006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004002:	2b02      	cmp	r3, #2
 8004004:	d130      	bne.n	8004068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	2203      	movs	r2, #3
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800403c:	2201      	movs	r2, #1
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 0201 	and.w	r2, r3, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b03      	cmp	r3, #3
 8004072:	d017      	beq.n	80040a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d123      	bne.n	80040f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	08da      	lsrs	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3208      	adds	r2, #8
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a2 	beq.w	800427e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b57      	ldr	r3, [pc, #348]	@ (800429c <HAL_GPIO_Init+0x2e8>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	4a56      	ldr	r2, [pc, #344]	@ (800429c <HAL_GPIO_Init+0x2e8>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004148:	6453      	str	r3, [r2, #68]	@ 0x44
 800414a:	4b54      	ldr	r3, [pc, #336]	@ (800429c <HAL_GPIO_Init+0x2e8>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004156:	4a52      	ldr	r2, [pc, #328]	@ (80042a0 <HAL_GPIO_Init+0x2ec>)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a49      	ldr	r2, [pc, #292]	@ (80042a4 <HAL_GPIO_Init+0x2f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d019      	beq.n	80041b6 <HAL_GPIO_Init+0x202>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a48      	ldr	r2, [pc, #288]	@ (80042a8 <HAL_GPIO_Init+0x2f4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_GPIO_Init+0x1fe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a47      	ldr	r2, [pc, #284]	@ (80042ac <HAL_GPIO_Init+0x2f8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00d      	beq.n	80041ae <HAL_GPIO_Init+0x1fa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a46      	ldr	r2, [pc, #280]	@ (80042b0 <HAL_GPIO_Init+0x2fc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <HAL_GPIO_Init+0x1f6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a45      	ldr	r2, [pc, #276]	@ (80042b4 <HAL_GPIO_Init+0x300>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_GPIO_Init+0x1f2>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e008      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041a6:	2307      	movs	r3, #7
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e004      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041b6:	2300      	movs	r3, #0
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f002 0203 	and.w	r2, r2, #3
 80041be:	0092      	lsls	r2, r2, #2
 80041c0:	4093      	lsls	r3, r2
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c8:	4935      	ldr	r1, [pc, #212]	@ (80042a0 <HAL_GPIO_Init+0x2ec>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3302      	adds	r3, #2
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d6:	4b38      	ldr	r3, [pc, #224]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041fa:	4a2f      	ldr	r2, [pc, #188]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004200:	4b2d      	ldr	r3, [pc, #180]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004224:	4a24      	ldr	r2, [pc, #144]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800422a:	4b23      	ldr	r3, [pc, #140]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800424e:	4a1a      	ldr	r2, [pc, #104]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004278:	4a0f      	ldr	r2, [pc, #60]	@ (80042b8 <HAL_GPIO_Init+0x304>)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	f67f aea2 	bls.w	8003fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	@ 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40020000 	.word	0x40020000
 80042a8:	40020400 	.word	0x40020400
 80042ac:	40020800 	.word	0x40020800
 80042b0:	40020c00 	.word	0x40020c00
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d8:	e003      	b.n	80042e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	619a      	str	r2, [r3, #24]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e267      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d075      	beq.n	80043fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800430e:	4b88      	ldr	r3, [pc, #544]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b04      	cmp	r3, #4
 8004318:	d00c      	beq.n	8004334 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431a:	4b85      	ldr	r3, [pc, #532]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004322:	2b08      	cmp	r3, #8
 8004324:	d112      	bne.n	800434c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	4b82      	ldr	r3, [pc, #520]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004332:	d10b      	bne.n	800434c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	4b7e      	ldr	r3, [pc, #504]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d05b      	beq.n	80043f8 <HAL_RCC_OscConfig+0x108>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d157      	bne.n	80043f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e242      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004354:	d106      	bne.n	8004364 <HAL_RCC_OscConfig+0x74>
 8004356:	4b76      	ldr	r3, [pc, #472]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a75      	ldr	r2, [pc, #468]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e01d      	b.n	80043a0 <HAL_RCC_OscConfig+0xb0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x98>
 800436e:	4b70      	ldr	r3, [pc, #448]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6f      	ldr	r2, [pc, #444]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b6d      	ldr	r3, [pc, #436]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6c      	ldr	r2, [pc, #432]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0xb0>
 8004388:	4b69      	ldr	r3, [pc, #420]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800438e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b66      	ldr	r3, [pc, #408]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a65      	ldr	r2, [pc, #404]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800439a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fe fc32 	bl	8002c10 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fe fc2e 	bl	8002c10 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	@ 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e207      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fe fc1e 	bl	8002c10 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fe fc1a 	bl	8002c10 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1f3      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	4b51      	ldr	r3, [pc, #324]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0xe8>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d063      	beq.n	80044ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004406:	4b4a      	ldr	r3, [pc, #296]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004412:	4b47      	ldr	r3, [pc, #284]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800441a:	2b08      	cmp	r3, #8
 800441c:	d11c      	bne.n	8004458 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800441e:	4b44      	ldr	r3, [pc, #272]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d116      	bne.n	8004458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	4b41      	ldr	r3, [pc, #260]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCC_OscConfig+0x152>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1c7      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004442:	4b3b      	ldr	r3, [pc, #236]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4937      	ldr	r1, [pc, #220]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	e03a      	b.n	80044ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004460:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCC_OscConfig+0x244>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fe fbd3 	bl	8002c10 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446e:	f7fe fbcf 	bl	8002c10 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e1a8      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004480:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448c:	4b28      	ldr	r3, [pc, #160]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4925      	ldr	r1, [pc, #148]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	e015      	b.n	80044ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a2:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <HAL_RCC_OscConfig+0x244>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe fbb2 	bl	8002c10 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fe fbae 	bl	8002c10 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e187      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d036      	beq.n	8004548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <HAL_RCC_OscConfig+0x248>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fe fb92 	bl	8002c10 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fe fb8e 	bl	8002c10 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e167      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004502:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_OscConfig+0x240>)
 8004504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x200>
 800450e:	e01b      	b.n	8004548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004510:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <HAL_RCC_OscConfig+0x248>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004516:	f7fe fb7b 	bl	8002c10 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	e00e      	b.n	800453c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fe fb77 	bl	8002c10 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d907      	bls.n	800453c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e150      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
 8004530:	40023800 	.word	0x40023800
 8004534:	42470000 	.word	0x42470000
 8004538:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453c:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800453e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ea      	bne.n	800451e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8097 	beq.w	8004684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b81      	ldr	r3, [pc, #516]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	4b7d      	ldr	r3, [pc, #500]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	4a7c      	ldr	r2, [pc, #496]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	@ 0x40
 8004576:	4b7a      	ldr	r3, [pc, #488]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	4b77      	ldr	r3, [pc, #476]	@ (8004764 <HAL_RCC_OscConfig+0x474>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d118      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004592:	4b74      	ldr	r3, [pc, #464]	@ (8004764 <HAL_RCC_OscConfig+0x474>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a73      	ldr	r2, [pc, #460]	@ (8004764 <HAL_RCC_OscConfig+0x474>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459e:	f7fe fb37 	bl	8002c10 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a6:	f7fe fb33 	bl	8002c10 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e10c      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004764 <HAL_RCC_OscConfig+0x474>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d106      	bne.n	80045da <HAL_RCC_OscConfig+0x2ea>
 80045cc:	4b64      	ldr	r3, [pc, #400]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a63      	ldr	r2, [pc, #396]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d8:	e01c      	b.n	8004614 <HAL_RCC_OscConfig+0x324>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x30c>
 80045e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 0304 	orr.w	r3, r3, #4
 80045ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0x324>
 80045fc:	4b58      	ldr	r3, [pc, #352]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	4a57      	ldr	r2, [pc, #348]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	@ 0x70
 8004608:	4b55      	ldr	r3, [pc, #340]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a54      	ldr	r2, [pc, #336]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800460e:	f023 0304 	bic.w	r3, r3, #4
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fe faf8 	bl	8002c10 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fe faf4 	bl	8002c10 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0cb      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	4b49      	ldr	r3, [pc, #292]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ee      	beq.n	8004624 <HAL_RCC_OscConfig+0x334>
 8004646:	e014      	b.n	8004672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004648:	f7fe fae2 	bl	8002c10 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464e:	e00a      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fe fade 	bl	8002c10 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0b5      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004666:	4b3e      	ldr	r3, [pc, #248]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ee      	bne.n	8004650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004678:	4b39      	ldr	r3, [pc, #228]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	4a38      	ldr	r2, [pc, #224]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a1 	beq.w	80047d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b08      	cmp	r3, #8
 8004698:	d05c      	beq.n	8004754 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d141      	bne.n	8004726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x478>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe fab2 	bl	8002c10 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe faae 	bl	8002c10 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e087      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	491b      	ldr	r1, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x478>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fe fa87 	bl	8002c10 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fe fa83 	bl	8002c10 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e05c      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x416>
 8004724:	e054      	b.n	80047d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <HAL_RCC_OscConfig+0x478>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe fa70 	bl	8002c10 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fa6c 	bl	8002c10 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e045      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_RCC_OscConfig+0x470>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x444>
 8004752:	e03d      	b.n	80047d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e038      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000
 8004768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <HAL_RCC_OscConfig+0x4ec>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d028      	beq.n	80047cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d121      	bne.n	80047cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d11a      	bne.n	80047cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	3b01      	subs	r3, #1
 80047b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0cc      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b68      	ldr	r3, [pc, #416]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d90c      	bls.n	800481c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b65      	ldr	r3, [pc, #404]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b63      	ldr	r3, [pc, #396]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0b8      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004834:	4b59      	ldr	r3, [pc, #356]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a58      	ldr	r2, [pc, #352]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800483e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800484c:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a52      	ldr	r2, [pc, #328]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004858:	4b50      	ldr	r3, [pc, #320]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	494d      	ldr	r1, [pc, #308]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d044      	beq.n	8004900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	4b47      	ldr	r3, [pc, #284]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d119      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e07f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d003      	beq.n	800489e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489a:	2b03      	cmp	r3, #3
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489e:	4b3f      	ldr	r3, [pc, #252]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e06f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ae:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e067      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048be:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4934      	ldr	r1, [pc, #208]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d0:	f7fe f99e 	bl	8002c10 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fe f99a 	bl	8002c10 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e04f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	4b2b      	ldr	r3, [pc, #172]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 020c 	and.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d1eb      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d20c      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e032      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4916      	ldr	r1, [pc, #88]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004952:	4b12      	ldr	r3, [pc, #72]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	490e      	ldr	r1, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004966:	f000 f821 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 800496a:	4602      	mov	r2, r0
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	490a      	ldr	r1, [pc, #40]	@ (80049a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	4a09      	ldr	r2, [pc, #36]	@ (80049a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe f8fe 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40023c00 	.word	0x40023c00
 800499c:	40023800 	.word	0x40023800
 80049a0:	08008824 	.word	0x08008824
 80049a4:	200003c4 	.word	0x200003c4
 80049a8:	200003c8 	.word	0x200003c8

080049ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b0:	b090      	sub	sp, #64	@ 0x40
 80049b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c4:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d00d      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x40>
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	f200 80a1 	bhi.w	8004b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x34>
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d003      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049de:	e09b      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80049e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049e4:	e09b      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049e6:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049ea:	e098      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ec:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f6:	4b4d      	ldr	r3, [pc, #308]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d028      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a02:	4b4a      	ldr	r3, [pc, #296]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	2200      	movs	r2, #0
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a14:	2100      	movs	r1, #0
 8004a16:	4b47      	ldr	r3, [pc, #284]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a18:	fb03 f201 	mul.w	r2, r3, r1
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	4a43      	ldr	r2, [pc, #268]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a26:	fba0 1202 	umull	r1, r2, r0, r2
 8004a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a32:	4413      	add	r3, r2
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	2200      	movs	r2, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a46:	f7fc f8ff 	bl	8000c48 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a52:	e053      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a54:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	617a      	str	r2, [r7, #20]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a66:	f04f 0b00 	mov.w	fp, #0
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	ebb2 080a 	subs.w	r8, r2, sl
 8004a86:	eb63 090b 	sbc.w	r9, r3, fp
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8004aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	00eb      	lsls	r3, r5, #3
 8004ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab4:	00e2      	lsls	r2, r4, #3
 8004ab6:	4614      	mov	r4, r2
 8004ab8:	461d      	mov	r5, r3
 8004aba:	eb14 030a 	adds.w	r3, r4, sl
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	eb45 030b 	adc.w	r3, r5, fp
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	028b      	lsls	r3, r1, #10
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004adc:	4621      	mov	r1, r4
 8004ade:	028a      	lsls	r2, r1, #10
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	60fa      	str	r2, [r7, #12]
 8004aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004af0:	f7fc f8aa 	bl	8000c48 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4613      	mov	r3, r2
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	3301      	adds	r3, #1
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b16:	e002      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b18:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3740      	adds	r7, #64	@ 0x40
 8004b24:	46bd      	mov	sp, r7
 8004b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	017d7840 	.word	0x017d7840

08004b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07b      	b.n	8004c42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b5a:	d009      	beq.n	8004b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd febc 	bl	8002908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0104 	and.w	r1, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	f003 0210 	and.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5a:	f7fd ffd9 	bl	8002c10 <HAL_GetTick>
 8004c5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e12a      	b.n	8004eca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_Transmit+0x36>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e122      	b.n	8004eca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_SPI_Transmit+0x48>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e11b      	b.n	8004eca <HAL_SPI_Transmit+0x280>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce0:	d10f      	bne.n	8004d02 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d28:	d152      	bne.n	8004dd0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0xee>
 8004d32:	8b7b      	ldrh	r3, [r7, #26]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d145      	bne.n	8004dc4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d5c:	e032      	b.n	8004dc4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d112      	bne.n	8004d92 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d90:	e018      	b.n	8004dc4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d92:	f7fd ff3d 	bl	8002c10 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d803      	bhi.n	8004daa <HAL_SPI_Transmit+0x160>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Transmit+0x166>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e082      	b.n	8004eca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1c7      	bne.n	8004d5e <HAL_SPI_Transmit+0x114>
 8004dce:	e053      	b.n	8004e78 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_Transmit+0x194>
 8004dd8:	8b7b      	ldrh	r3, [r7, #26]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d147      	bne.n	8004e6e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e04:	e033      	b.n	8004e6e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d113      	bne.n	8004e3c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e3a:	e018      	b.n	8004e6e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3c:	f7fd fee8 	bl	8002c10 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d803      	bhi.n	8004e54 <HAL_SPI_Transmit+0x20a>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_Transmit+0x210>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e02d      	b.n	8004eca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1c6      	bne.n	8004e06 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f8b1 	bl	8004fe4 <SPI_EndRxTxTransaction>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee4:	f7fd fe94 	bl	8002c10 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ef4:	f7fd fe8c 	bl	8002c10 <HAL_GetTick>
 8004ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004efa:	4b39      	ldr	r3, [pc, #228]	@ (8004fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	0d1b      	lsrs	r3, r3, #20
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0a:	e055      	b.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d051      	beq.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f14:	f7fd fe7c 	bl	8002c10 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d902      	bls.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d13d      	bne.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f42:	d111      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4c:	d004      	beq.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d107      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f70:	d10f      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e018      	b.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e002      	b.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d19a      	bne.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200003c4 	.word	0x200003c4

08004fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff6a 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e032      	b.n	800507c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005016:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <SPI_EndRxTxTransaction+0xa0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <SPI_EndRxTxTransaction+0xa4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0d5b      	lsrs	r3, r3, #21
 8005022:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005034:	d112      	bne.n	800505c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	2180      	movs	r1, #128	@ 0x80
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ff47 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e00f      	b.n	800507c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	3b01      	subs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b80      	cmp	r3, #128	@ 0x80
 8005074:	d0f2      	beq.n	800505c <SPI_EndRxTxTransaction+0x78>
 8005076:	e000      	b.n	800507a <SPI_EndRxTxTransaction+0x96>
        break;
 8005078:	bf00      	nop
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200003c4 	.word	0x200003c4
 8005088:	165e9f81 	.word	0x165e9f81

0800508c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e041      	b.n	8005122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd fc70 	bl	8002998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 f992 	bl	80053f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e03c      	b.n	80051be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_TIM_Base_Start+0xa0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start+0x5c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start+0x5c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1a      	ldr	r2, [pc, #104]	@ (80051d0 <HAL_TIM_Base_Start+0xa4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start+0x5c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <HAL_TIM_Base_Start+0xa8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start+0x5c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <HAL_TIM_Base_Start+0xac>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start+0x5c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a16      	ldr	r2, [pc, #88]	@ (80051dc <HAL_TIM_Base_Start+0xb0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d111      	bne.n	80051ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d010      	beq.n	80051bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	e007      	b.n	80051bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40014000 	.word	0x40014000

080051e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x1c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b4      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x186>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	f000 8086 	beq.w	8005352 <HAL_TIM_ConfigClockSource+0x172>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b70      	cmp	r3, #112	@ 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xa6>
 8005250:	2b70      	cmp	r3, #112	@ 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b60      	cmp	r3, #96	@ 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x11a>
 8005258:	2b60      	cmp	r3, #96	@ 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b50      	cmp	r3, #80	@ 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xfa>
 8005260:	2b50      	cmp	r3, #80	@ 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x13a>
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b30      	cmp	r3, #48	@ 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	2b30      	cmp	r3, #48	@ 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	f000 fa3e 	bl	8005716 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04f      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	f000 fa27 	bl	8005716 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 f99b 	bl	8005622 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	@ 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f9f4 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 f9ba 	bl	8005680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	@ 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f9e4 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 8005318:	e01c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 f97b 	bl	8005622 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	@ 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f9d4 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 8005338:	e00c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 f9cb 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 800534a:	e003      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e000      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005382:	2302      	movs	r3, #2
 8005384:	e031      	b.n	80053ea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8b1 	bl	8005500 <TIM_SlaveTimer_SetConfig>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e018      	b.n	80053ea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053d6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a37      	ldr	r2, [pc, #220]	@ (80054e4 <TIM_Base_SetConfig+0xf0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0x38>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a34      	ldr	r2, [pc, #208]	@ (80054e8 <TIM_Base_SetConfig+0xf4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a33      	ldr	r2, [pc, #204]	@ (80054ec <TIM_Base_SetConfig+0xf8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a32      	ldr	r2, [pc, #200]	@ (80054f0 <TIM_Base_SetConfig+0xfc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d108      	bne.n	800543e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	@ (80054e4 <TIM_Base_SetConfig+0xf0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01b      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544c:	d017      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a25      	ldr	r2, [pc, #148]	@ (80054e8 <TIM_Base_SetConfig+0xf4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a24      	ldr	r2, [pc, #144]	@ (80054ec <TIM_Base_SetConfig+0xf8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00f      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <TIM_Base_SetConfig+0xfc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00b      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a22      	ldr	r2, [pc, #136]	@ (80054f4 <TIM_Base_SetConfig+0x100>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a21      	ldr	r2, [pc, #132]	@ (80054f8 <TIM_Base_SetConfig+0x104>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a20      	ldr	r2, [pc, #128]	@ (80054fc <TIM_Base_SetConfig+0x108>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0c      	ldr	r2, [pc, #48]	@ (80054e4 <TIM_Base_SetConfig+0xf0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d103      	bne.n	80054be <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b70      	cmp	r3, #112	@ 0x70
 8005548:	d01a      	beq.n	8005580 <TIM_SlaveTimer_SetConfig+0x80>
 800554a:	2b70      	cmp	r3, #112	@ 0x70
 800554c:	d860      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 800554e:	2b60      	cmp	r3, #96	@ 0x60
 8005550:	d054      	beq.n	80055fc <TIM_SlaveTimer_SetConfig+0xfc>
 8005552:	2b60      	cmp	r3, #96	@ 0x60
 8005554:	d85c      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 8005556:	2b50      	cmp	r3, #80	@ 0x50
 8005558:	d046      	beq.n	80055e8 <TIM_SlaveTimer_SetConfig+0xe8>
 800555a:	2b50      	cmp	r3, #80	@ 0x50
 800555c:	d858      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d019      	beq.n	8005596 <TIM_SlaveTimer_SetConfig+0x96>
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d854      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 8005566:	2b30      	cmp	r3, #48	@ 0x30
 8005568:	d055      	beq.n	8005616 <TIM_SlaveTimer_SetConfig+0x116>
 800556a:	2b30      	cmp	r3, #48	@ 0x30
 800556c:	d850      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 800556e:	2b20      	cmp	r3, #32
 8005570:	d051      	beq.n	8005616 <TIM_SlaveTimer_SetConfig+0x116>
 8005572:	2b20      	cmp	r3, #32
 8005574:	d84c      	bhi.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d04d      	beq.n	8005616 <TIM_SlaveTimer_SetConfig+0x116>
 800557a:	2b10      	cmp	r3, #16
 800557c:	d04b      	beq.n	8005616 <TIM_SlaveTimer_SetConfig+0x116>
 800557e:	e047      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005590:	f000 f8c1 	bl	8005716 <TIM_ETR_SetConfig>
      break;
 8005594:	e040      	b.n	8005618 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d101      	bne.n	80055a2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e03b      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
      break;
 80055e6:	e017      	b.n	8005618 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f4:	461a      	mov	r2, r3
 80055f6:	f000 f814 	bl	8005622 <TIM_TI1_ConfigInputStage>
      break;
 80055fa:	e00d      	b.n	8005618 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005608:	461a      	mov	r2, r3
 800560a:	f000 f839 	bl	8005680 <TIM_TI2_ConfigInputStage>
      break;
 800560e:	e003      	b.n	8005618 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	75fb      	strb	r3, [r7, #23]
      break;
 8005614:	e000      	b.n	8005618 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005616:	bf00      	nop
  }

  return status;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0201 	bic.w	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 030a 	bic.w	r3, r3, #10
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0210 	bic.w	r2, r3, #16
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	031b      	lsls	r3, r3, #12
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	621a      	str	r2, [r3, #32]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f043 0307 	orr.w	r3, r3, #7
 8005702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	021a      	lsls	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	431a      	orrs	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	609a      	str	r2, [r3, #8]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e050      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a15      	ldr	r2, [pc, #84]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a13      	ldr	r2, [pc, #76]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40014000 	.word	0x40014000

08005834 <sniprintf>:
 8005834:	b40c      	push	{r2, r3}
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <sniprintf+0x68>)
 800583a:	1e0c      	subs	r4, r1, #0
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	b09d      	sub	sp, #116	@ 0x74
 8005840:	da08      	bge.n	8005854 <sniprintf+0x20>
 8005842:	238b      	movs	r3, #139	@ 0x8b
 8005844:	602b      	str	r3, [r5, #0]
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b01d      	add	sp, #116	@ 0x74
 800584c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005850:	b002      	add	sp, #8
 8005852:	4770      	bx	lr
 8005854:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005858:	f8ad 3014 	strh.w	r3, [sp, #20]
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005862:	bf14      	ite	ne
 8005864:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005868:	4623      	moveq	r3, r4
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005872:	9002      	str	r0, [sp, #8]
 8005874:	9006      	str	r0, [sp, #24]
 8005876:	f8ad 3016 	strh.w	r3, [sp, #22]
 800587a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800587c:	ab21      	add	r3, sp, #132	@ 0x84
 800587e:	a902      	add	r1, sp, #8
 8005880:	4628      	mov	r0, r5
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f000 f994 	bl	8005bb0 <_svfiprintf_r>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	bfbc      	itt	lt
 800588c:	238b      	movlt	r3, #139	@ 0x8b
 800588e:	602b      	strlt	r3, [r5, #0]
 8005890:	2c00      	cmp	r4, #0
 8005892:	d0da      	beq.n	800584a <sniprintf+0x16>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e7d6      	b.n	800584a <sniprintf+0x16>
 800589c:	200003d0 	.word	0x200003d0

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <__errno>:
 80058b0:	4b01      	ldr	r3, [pc, #4]	@ (80058b8 <__errno+0x8>)
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	200003d0 	.word	0x200003d0

080058bc <__libc_init_array>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4d0d      	ldr	r5, [pc, #52]	@ (80058f4 <__libc_init_array+0x38>)
 80058c0:	4c0d      	ldr	r4, [pc, #52]	@ (80058f8 <__libc_init_array+0x3c>)
 80058c2:	1b64      	subs	r4, r4, r5
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	2600      	movs	r6, #0
 80058c8:	42a6      	cmp	r6, r4
 80058ca:	d109      	bne.n	80058e0 <__libc_init_array+0x24>
 80058cc:	4d0b      	ldr	r5, [pc, #44]	@ (80058fc <__libc_init_array+0x40>)
 80058ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005900 <__libc_init_array+0x44>)
 80058d0:	f001 fde2 	bl	8007498 <_init>
 80058d4:	1b64      	subs	r4, r4, r5
 80058d6:	10a4      	asrs	r4, r4, #2
 80058d8:	2600      	movs	r6, #0
 80058da:	42a6      	cmp	r6, r4
 80058dc:	d105      	bne.n	80058ea <__libc_init_array+0x2e>
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e4:	4798      	blx	r3
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7ee      	b.n	80058c8 <__libc_init_array+0xc>
 80058ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ee:	4798      	blx	r3
 80058f0:	3601      	adds	r6, #1
 80058f2:	e7f2      	b.n	80058da <__libc_init_array+0x1e>
 80058f4:	08008a60 	.word	0x08008a60
 80058f8:	08008a60 	.word	0x08008a60
 80058fc:	08008a60 	.word	0x08008a60
 8005900:	08008a64 	.word	0x08008a64

08005904 <__retarget_lock_acquire_recursive>:
 8005904:	4770      	bx	lr

08005906 <__retarget_lock_release_recursive>:
 8005906:	4770      	bx	lr

08005908 <_free_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4605      	mov	r5, r0
 800590c:	2900      	cmp	r1, #0
 800590e:	d041      	beq.n	8005994 <_free_r+0x8c>
 8005910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005914:	1f0c      	subs	r4, r1, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfb8      	it	lt
 800591a:	18e4      	addlt	r4, r4, r3
 800591c:	f000 f8e0 	bl	8005ae0 <__malloc_lock>
 8005920:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <_free_r+0x90>)
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	b933      	cbnz	r3, 8005934 <_free_r+0x2c>
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	6014      	str	r4, [r2, #0]
 800592a:	4628      	mov	r0, r5
 800592c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005930:	f000 b8dc 	b.w	8005aec <__malloc_unlock>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d908      	bls.n	800594a <_free_r+0x42>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	1821      	adds	r1, r4, r0
 800593c:	428b      	cmp	r3, r1
 800593e:	bf01      	itttt	eq
 8005940:	6819      	ldreq	r1, [r3, #0]
 8005942:	685b      	ldreq	r3, [r3, #4]
 8005944:	1809      	addeq	r1, r1, r0
 8005946:	6021      	streq	r1, [r4, #0]
 8005948:	e7ed      	b.n	8005926 <_free_r+0x1e>
 800594a:	461a      	mov	r2, r3
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b10b      	cbz	r3, 8005954 <_free_r+0x4c>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d9fa      	bls.n	800594a <_free_r+0x42>
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	1850      	adds	r0, r2, r1
 8005958:	42a0      	cmp	r0, r4
 800595a:	d10b      	bne.n	8005974 <_free_r+0x6c>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	4401      	add	r1, r0
 8005960:	1850      	adds	r0, r2, r1
 8005962:	4283      	cmp	r3, r0
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	d1e0      	bne.n	800592a <_free_r+0x22>
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	6053      	str	r3, [r2, #4]
 800596e:	4408      	add	r0, r1
 8005970:	6010      	str	r0, [r2, #0]
 8005972:	e7da      	b.n	800592a <_free_r+0x22>
 8005974:	d902      	bls.n	800597c <_free_r+0x74>
 8005976:	230c      	movs	r3, #12
 8005978:	602b      	str	r3, [r5, #0]
 800597a:	e7d6      	b.n	800592a <_free_r+0x22>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf04      	itt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	bf04      	itt	eq
 800598c:	1809      	addeq	r1, r1, r0
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	6054      	str	r4, [r2, #4]
 8005992:	e7ca      	b.n	800592a <_free_r+0x22>
 8005994:	bd38      	pop	{r3, r4, r5, pc}
 8005996:	bf00      	nop
 8005998:	200008ec 	.word	0x200008ec

0800599c <sbrk_aligned>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4e0f      	ldr	r6, [pc, #60]	@ (80059dc <sbrk_aligned+0x40>)
 80059a0:	460c      	mov	r4, r1
 80059a2:	6831      	ldr	r1, [r6, #0]
 80059a4:	4605      	mov	r5, r0
 80059a6:	b911      	cbnz	r1, 80059ae <sbrk_aligned+0x12>
 80059a8:	f000 fba4 	bl	80060f4 <_sbrk_r>
 80059ac:	6030      	str	r0, [r6, #0]
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fb9f 	bl	80060f4 <_sbrk_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d103      	bne.n	80059c2 <sbrk_aligned+0x26>
 80059ba:	f04f 34ff 	mov.w	r4, #4294967295
 80059be:	4620      	mov	r0, r4
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	1cc4      	adds	r4, r0, #3
 80059c4:	f024 0403 	bic.w	r4, r4, #3
 80059c8:	42a0      	cmp	r0, r4
 80059ca:	d0f8      	beq.n	80059be <sbrk_aligned+0x22>
 80059cc:	1a21      	subs	r1, r4, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fb90 	bl	80060f4 <_sbrk_r>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d1f2      	bne.n	80059be <sbrk_aligned+0x22>
 80059d8:	e7ef      	b.n	80059ba <sbrk_aligned+0x1e>
 80059da:	bf00      	nop
 80059dc:	200008e8 	.word	0x200008e8

080059e0 <_malloc_r>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	1ccd      	adds	r5, r1, #3
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	db01      	blt.n	80059fc <_malloc_r+0x1c>
 80059f8:	42a9      	cmp	r1, r5
 80059fa:	d904      	bls.n	8005a06 <_malloc_r+0x26>
 80059fc:	230c      	movs	r3, #12
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	2000      	movs	r0, #0
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005adc <_malloc_r+0xfc>
 8005a0a:	f000 f869 	bl	8005ae0 <__malloc_lock>
 8005a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a12:	461c      	mov	r4, r3
 8005a14:	bb44      	cbnz	r4, 8005a68 <_malloc_r+0x88>
 8005a16:	4629      	mov	r1, r5
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ffbf 	bl	800599c <sbrk_aligned>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	4604      	mov	r4, r0
 8005a22:	d158      	bne.n	8005ad6 <_malloc_r+0xf6>
 8005a24:	f8d8 4000 	ldr.w	r4, [r8]
 8005a28:	4627      	mov	r7, r4
 8005a2a:	2f00      	cmp	r7, #0
 8005a2c:	d143      	bne.n	8005ab6 <_malloc_r+0xd6>
 8005a2e:	2c00      	cmp	r4, #0
 8005a30:	d04b      	beq.n	8005aca <_malloc_r+0xea>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	4639      	mov	r1, r7
 8005a36:	4630      	mov	r0, r6
 8005a38:	eb04 0903 	add.w	r9, r4, r3
 8005a3c:	f000 fb5a 	bl	80060f4 <_sbrk_r>
 8005a40:	4581      	cmp	r9, r0
 8005a42:	d142      	bne.n	8005aca <_malloc_r+0xea>
 8005a44:	6821      	ldr	r1, [r4, #0]
 8005a46:	1a6d      	subs	r5, r5, r1
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ffa6 	bl	800599c <sbrk_aligned>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d03a      	beq.n	8005aca <_malloc_r+0xea>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	442b      	add	r3, r5
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	bb62      	cbnz	r2, 8005abc <_malloc_r+0xdc>
 8005a62:	f8c8 7000 	str.w	r7, [r8]
 8005a66:	e00f      	b.n	8005a88 <_malloc_r+0xa8>
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	1b52      	subs	r2, r2, r5
 8005a6c:	d420      	bmi.n	8005ab0 <_malloc_r+0xd0>
 8005a6e:	2a0b      	cmp	r2, #11
 8005a70:	d917      	bls.n	8005aa2 <_malloc_r+0xc2>
 8005a72:	1961      	adds	r1, r4, r5
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	6025      	str	r5, [r4, #0]
 8005a78:	bf18      	it	ne
 8005a7a:	6059      	strne	r1, [r3, #4]
 8005a7c:	6863      	ldr	r3, [r4, #4]
 8005a7e:	bf08      	it	eq
 8005a80:	f8c8 1000 	streq.w	r1, [r8]
 8005a84:	5162      	str	r2, [r4, r5]
 8005a86:	604b      	str	r3, [r1, #4]
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f82f 	bl	8005aec <__malloc_unlock>
 8005a8e:	f104 000b 	add.w	r0, r4, #11
 8005a92:	1d23      	adds	r3, r4, #4
 8005a94:	f020 0007 	bic.w	r0, r0, #7
 8005a98:	1ac2      	subs	r2, r0, r3
 8005a9a:	bf1c      	itt	ne
 8005a9c:	1a1b      	subne	r3, r3, r0
 8005a9e:	50a3      	strne	r3, [r4, r2]
 8005aa0:	e7af      	b.n	8005a02 <_malloc_r+0x22>
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	bf0c      	ite	eq
 8005aa8:	f8c8 2000 	streq.w	r2, [r8]
 8005aac:	605a      	strne	r2, [r3, #4]
 8005aae:	e7eb      	b.n	8005a88 <_malloc_r+0xa8>
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	6864      	ldr	r4, [r4, #4]
 8005ab4:	e7ae      	b.n	8005a14 <_malloc_r+0x34>
 8005ab6:	463c      	mov	r4, r7
 8005ab8:	687f      	ldr	r7, [r7, #4]
 8005aba:	e7b6      	b.n	8005a2a <_malloc_r+0x4a>
 8005abc:	461a      	mov	r2, r3
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d1fb      	bne.n	8005abc <_malloc_r+0xdc>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6053      	str	r3, [r2, #4]
 8005ac8:	e7de      	b.n	8005a88 <_malloc_r+0xa8>
 8005aca:	230c      	movs	r3, #12
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f80c 	bl	8005aec <__malloc_unlock>
 8005ad4:	e794      	b.n	8005a00 <_malloc_r+0x20>
 8005ad6:	6005      	str	r5, [r0, #0]
 8005ad8:	e7d6      	b.n	8005a88 <_malloc_r+0xa8>
 8005ada:	bf00      	nop
 8005adc:	200008ec 	.word	0x200008ec

08005ae0 <__malloc_lock>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	@ (8005ae8 <__malloc_lock+0x8>)
 8005ae2:	f7ff bf0f 	b.w	8005904 <__retarget_lock_acquire_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200008e4 	.word	0x200008e4

08005aec <__malloc_unlock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	@ (8005af4 <__malloc_unlock+0x8>)
 8005aee:	f7ff bf0a 	b.w	8005906 <__retarget_lock_release_recursive>
 8005af2:	bf00      	nop
 8005af4:	200008e4 	.word	0x200008e4

08005af8 <__ssputs_r>:
 8005af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	688e      	ldr	r6, [r1, #8]
 8005afe:	461f      	mov	r7, r3
 8005b00:	42be      	cmp	r6, r7
 8005b02:	680b      	ldr	r3, [r1, #0]
 8005b04:	4682      	mov	sl, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4690      	mov	r8, r2
 8005b0a:	d82d      	bhi.n	8005b68 <__ssputs_r+0x70>
 8005b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b14:	d026      	beq.n	8005b64 <__ssputs_r+0x6c>
 8005b16:	6965      	ldr	r5, [r4, #20]
 8005b18:	6909      	ldr	r1, [r1, #16]
 8005b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b1e:	eba3 0901 	sub.w	r9, r3, r1
 8005b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b26:	1c7b      	adds	r3, r7, #1
 8005b28:	444b      	add	r3, r9
 8005b2a:	106d      	asrs	r5, r5, #1
 8005b2c:	429d      	cmp	r5, r3
 8005b2e:	bf38      	it	cc
 8005b30:	461d      	movcc	r5, r3
 8005b32:	0553      	lsls	r3, r2, #21
 8005b34:	d527      	bpl.n	8005b86 <__ssputs_r+0x8e>
 8005b36:	4629      	mov	r1, r5
 8005b38:	f7ff ff52 	bl	80059e0 <_malloc_r>
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	b360      	cbz	r0, 8005b9a <__ssputs_r+0xa2>
 8005b40:	6921      	ldr	r1, [r4, #16]
 8005b42:	464a      	mov	r2, r9
 8005b44:	f000 fae6 	bl	8006114 <memcpy>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	6126      	str	r6, [r4, #16]
 8005b56:	6165      	str	r5, [r4, #20]
 8005b58:	444e      	add	r6, r9
 8005b5a:	eba5 0509 	sub.w	r5, r5, r9
 8005b5e:	6026      	str	r6, [r4, #0]
 8005b60:	60a5      	str	r5, [r4, #8]
 8005b62:	463e      	mov	r6, r7
 8005b64:	42be      	cmp	r6, r7
 8005b66:	d900      	bls.n	8005b6a <__ssputs_r+0x72>
 8005b68:	463e      	mov	r6, r7
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4641      	mov	r1, r8
 8005b70:	f000 faa6 	bl	80060c0 <memmove>
 8005b74:	68a3      	ldr	r3, [r4, #8]
 8005b76:	1b9b      	subs	r3, r3, r6
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	4433      	add	r3, r6
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	2000      	movs	r0, #0
 8005b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b86:	462a      	mov	r2, r5
 8005b88:	f000 fad2 	bl	8006130 <_realloc_r>
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d1e0      	bne.n	8005b54 <__ssputs_r+0x5c>
 8005b92:	6921      	ldr	r1, [r4, #16]
 8005b94:	4650      	mov	r0, sl
 8005b96:	f7ff feb7 	bl	8005908 <_free_r>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	f8ca 3000 	str.w	r3, [sl]
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	e7e9      	b.n	8005b82 <__ssputs_r+0x8a>
	...

08005bb0 <_svfiprintf_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	4698      	mov	r8, r3
 8005bb6:	898b      	ldrh	r3, [r1, #12]
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	b09d      	sub	sp, #116	@ 0x74
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	d510      	bpl.n	8005be6 <_svfiprintf_r+0x36>
 8005bc4:	690b      	ldr	r3, [r1, #16]
 8005bc6:	b973      	cbnz	r3, 8005be6 <_svfiprintf_r+0x36>
 8005bc8:	2140      	movs	r1, #64	@ 0x40
 8005bca:	f7ff ff09 	bl	80059e0 <_malloc_r>
 8005bce:	6028      	str	r0, [r5, #0]
 8005bd0:	6128      	str	r0, [r5, #16]
 8005bd2:	b930      	cbnz	r0, 8005be2 <_svfiprintf_r+0x32>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	b01d      	add	sp, #116	@ 0x74
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	2340      	movs	r3, #64	@ 0x40
 8005be4:	616b      	str	r3, [r5, #20]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bea:	2320      	movs	r3, #32
 8005bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bf4:	2330      	movs	r3, #48	@ 0x30
 8005bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d94 <_svfiprintf_r+0x1e4>
 8005bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bfe:	f04f 0901 	mov.w	r9, #1
 8005c02:	4623      	mov	r3, r4
 8005c04:	469a      	mov	sl, r3
 8005c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c0a:	b10a      	cbz	r2, 8005c10 <_svfiprintf_r+0x60>
 8005c0c:	2a25      	cmp	r2, #37	@ 0x25
 8005c0e:	d1f9      	bne.n	8005c04 <_svfiprintf_r+0x54>
 8005c10:	ebba 0b04 	subs.w	fp, sl, r4
 8005c14:	d00b      	beq.n	8005c2e <_svfiprintf_r+0x7e>
 8005c16:	465b      	mov	r3, fp
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f7ff ff6b 	bl	8005af8 <__ssputs_r>
 8005c22:	3001      	adds	r0, #1
 8005c24:	f000 80a7 	beq.w	8005d76 <_svfiprintf_r+0x1c6>
 8005c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c2a:	445a      	add	r2, fp
 8005c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 809f 	beq.w	8005d76 <_svfiprintf_r+0x1c6>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c42:	f10a 0a01 	add.w	sl, sl, #1
 8005c46:	9304      	str	r3, [sp, #16]
 8005c48:	9307      	str	r3, [sp, #28]
 8005c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c50:	4654      	mov	r4, sl
 8005c52:	2205      	movs	r2, #5
 8005c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c58:	484e      	ldr	r0, [pc, #312]	@ (8005d94 <_svfiprintf_r+0x1e4>)
 8005c5a:	f7fa fac1 	bl	80001e0 <memchr>
 8005c5e:	9a04      	ldr	r2, [sp, #16]
 8005c60:	b9d8      	cbnz	r0, 8005c9a <_svfiprintf_r+0xea>
 8005c62:	06d0      	lsls	r0, r2, #27
 8005c64:	bf44      	itt	mi
 8005c66:	2320      	movmi	r3, #32
 8005c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c6c:	0711      	lsls	r1, r2, #28
 8005c6e:	bf44      	itt	mi
 8005c70:	232b      	movmi	r3, #43	@ 0x2b
 8005c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c76:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c7c:	d015      	beq.n	8005caa <_svfiprintf_r+0xfa>
 8005c7e:	9a07      	ldr	r2, [sp, #28]
 8005c80:	4654      	mov	r4, sl
 8005c82:	2000      	movs	r0, #0
 8005c84:	f04f 0c0a 	mov.w	ip, #10
 8005c88:	4621      	mov	r1, r4
 8005c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c8e:	3b30      	subs	r3, #48	@ 0x30
 8005c90:	2b09      	cmp	r3, #9
 8005c92:	d94b      	bls.n	8005d2c <_svfiprintf_r+0x17c>
 8005c94:	b1b0      	cbz	r0, 8005cc4 <_svfiprintf_r+0x114>
 8005c96:	9207      	str	r2, [sp, #28]
 8005c98:	e014      	b.n	8005cc4 <_svfiprintf_r+0x114>
 8005c9a:	eba0 0308 	sub.w	r3, r0, r8
 8005c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	46a2      	mov	sl, r4
 8005ca8:	e7d2      	b.n	8005c50 <_svfiprintf_r+0xa0>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	1d19      	adds	r1, r3, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	9103      	str	r1, [sp, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfbb      	ittet	lt
 8005cb6:	425b      	neglt	r3, r3
 8005cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005cbc:	9307      	strge	r3, [sp, #28]
 8005cbe:	9307      	strlt	r3, [sp, #28]
 8005cc0:	bfb8      	it	lt
 8005cc2:	9204      	strlt	r2, [sp, #16]
 8005cc4:	7823      	ldrb	r3, [r4, #0]
 8005cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cc8:	d10a      	bne.n	8005ce0 <_svfiprintf_r+0x130>
 8005cca:	7863      	ldrb	r3, [r4, #1]
 8005ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cce:	d132      	bne.n	8005d36 <_svfiprintf_r+0x186>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	1d1a      	adds	r2, r3, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	9203      	str	r2, [sp, #12]
 8005cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cdc:	3402      	adds	r4, #2
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005da4 <_svfiprintf_r+0x1f4>
 8005ce4:	7821      	ldrb	r1, [r4, #0]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	4650      	mov	r0, sl
 8005cea:	f7fa fa79 	bl	80001e0 <memchr>
 8005cee:	b138      	cbz	r0, 8005d00 <_svfiprintf_r+0x150>
 8005cf0:	9b04      	ldr	r3, [sp, #16]
 8005cf2:	eba0 000a 	sub.w	r0, r0, sl
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	4082      	lsls	r2, r0
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	3401      	adds	r4, #1
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d04:	4824      	ldr	r0, [pc, #144]	@ (8005d98 <_svfiprintf_r+0x1e8>)
 8005d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d0a:	2206      	movs	r2, #6
 8005d0c:	f7fa fa68 	bl	80001e0 <memchr>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d036      	beq.n	8005d82 <_svfiprintf_r+0x1d2>
 8005d14:	4b21      	ldr	r3, [pc, #132]	@ (8005d9c <_svfiprintf_r+0x1ec>)
 8005d16:	bb1b      	cbnz	r3, 8005d60 <_svfiprintf_r+0x1b0>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	3307      	adds	r3, #7
 8005d1c:	f023 0307 	bic.w	r3, r3, #7
 8005d20:	3308      	adds	r3, #8
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d26:	4433      	add	r3, r6
 8005d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2a:	e76a      	b.n	8005c02 <_svfiprintf_r+0x52>
 8005d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d30:	460c      	mov	r4, r1
 8005d32:	2001      	movs	r0, #1
 8005d34:	e7a8      	b.n	8005c88 <_svfiprintf_r+0xd8>
 8005d36:	2300      	movs	r3, #0
 8005d38:	3401      	adds	r4, #1
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f04f 0c0a 	mov.w	ip, #10
 8005d42:	4620      	mov	r0, r4
 8005d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d48:	3a30      	subs	r2, #48	@ 0x30
 8005d4a:	2a09      	cmp	r2, #9
 8005d4c:	d903      	bls.n	8005d56 <_svfiprintf_r+0x1a6>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0c6      	beq.n	8005ce0 <_svfiprintf_r+0x130>
 8005d52:	9105      	str	r1, [sp, #20]
 8005d54:	e7c4      	b.n	8005ce0 <_svfiprintf_r+0x130>
 8005d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e7f0      	b.n	8005d42 <_svfiprintf_r+0x192>
 8005d60:	ab03      	add	r3, sp, #12
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	462a      	mov	r2, r5
 8005d66:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <_svfiprintf_r+0x1f0>)
 8005d68:	a904      	add	r1, sp, #16
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f3af 8000 	nop.w
 8005d70:	1c42      	adds	r2, r0, #1
 8005d72:	4606      	mov	r6, r0
 8005d74:	d1d6      	bne.n	8005d24 <_svfiprintf_r+0x174>
 8005d76:	89ab      	ldrh	r3, [r5, #12]
 8005d78:	065b      	lsls	r3, r3, #25
 8005d7a:	f53f af2d 	bmi.w	8005bd8 <_svfiprintf_r+0x28>
 8005d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d80:	e72c      	b.n	8005bdc <_svfiprintf_r+0x2c>
 8005d82:	ab03      	add	r3, sp, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	462a      	mov	r2, r5
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <_svfiprintf_r+0x1f0>)
 8005d8a:	a904      	add	r1, sp, #16
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f000 f879 	bl	8005e84 <_printf_i>
 8005d92:	e7ed      	b.n	8005d70 <_svfiprintf_r+0x1c0>
 8005d94:	0800883c 	.word	0x0800883c
 8005d98:	08008846 	.word	0x08008846
 8005d9c:	00000000 	.word	0x00000000
 8005da0:	08005af9 	.word	0x08005af9
 8005da4:	08008842 	.word	0x08008842

08005da8 <_printf_common>:
 8005da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	4616      	mov	r6, r2
 8005dae:	4698      	mov	r8, r3
 8005db0:	688a      	ldr	r2, [r1, #8]
 8005db2:	690b      	ldr	r3, [r1, #16]
 8005db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	bfb8      	it	lt
 8005dbc:	4613      	movlt	r3, r2
 8005dbe:	6033      	str	r3, [r6, #0]
 8005dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	b10a      	cbz	r2, 8005dce <_printf_common+0x26>
 8005dca:	3301      	adds	r3, #1
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	0699      	lsls	r1, r3, #26
 8005dd2:	bf42      	ittt	mi
 8005dd4:	6833      	ldrmi	r3, [r6, #0]
 8005dd6:	3302      	addmi	r3, #2
 8005dd8:	6033      	strmi	r3, [r6, #0]
 8005dda:	6825      	ldr	r5, [r4, #0]
 8005ddc:	f015 0506 	ands.w	r5, r5, #6
 8005de0:	d106      	bne.n	8005df0 <_printf_common+0x48>
 8005de2:	f104 0a19 	add.w	sl, r4, #25
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	6832      	ldr	r2, [r6, #0]
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dc26      	bgt.n	8005e3e <_printf_common+0x96>
 8005df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	3b00      	subs	r3, #0
 8005df8:	bf18      	it	ne
 8005dfa:	2301      	movne	r3, #1
 8005dfc:	0692      	lsls	r2, r2, #26
 8005dfe:	d42b      	bmi.n	8005e58 <_printf_common+0xb0>
 8005e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e04:	4641      	mov	r1, r8
 8005e06:	4638      	mov	r0, r7
 8005e08:	47c8      	blx	r9
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d01e      	beq.n	8005e4c <_printf_common+0xa4>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	6922      	ldr	r2, [r4, #16]
 8005e12:	f003 0306 	and.w	r3, r3, #6
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	bf02      	ittt	eq
 8005e1a:	68e5      	ldreq	r5, [r4, #12]
 8005e1c:	6833      	ldreq	r3, [r6, #0]
 8005e1e:	1aed      	subeq	r5, r5, r3
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	bf0c      	ite	eq
 8005e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e28:	2500      	movne	r5, #0
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bfc4      	itt	gt
 8005e2e:	1a9b      	subgt	r3, r3, r2
 8005e30:	18ed      	addgt	r5, r5, r3
 8005e32:	2600      	movs	r6, #0
 8005e34:	341a      	adds	r4, #26
 8005e36:	42b5      	cmp	r5, r6
 8005e38:	d11a      	bne.n	8005e70 <_printf_common+0xc8>
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e008      	b.n	8005e50 <_printf_common+0xa8>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4652      	mov	r2, sl
 8005e42:	4641      	mov	r1, r8
 8005e44:	4638      	mov	r0, r7
 8005e46:	47c8      	blx	r9
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d103      	bne.n	8005e54 <_printf_common+0xac>
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e54:	3501      	adds	r5, #1
 8005e56:	e7c6      	b.n	8005de6 <_printf_common+0x3e>
 8005e58:	18e1      	adds	r1, r4, r3
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	2030      	movs	r0, #48	@ 0x30
 8005e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e62:	4422      	add	r2, r4
 8005e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	e7c7      	b.n	8005e00 <_printf_common+0x58>
 8005e70:	2301      	movs	r3, #1
 8005e72:	4622      	mov	r2, r4
 8005e74:	4641      	mov	r1, r8
 8005e76:	4638      	mov	r0, r7
 8005e78:	47c8      	blx	r9
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d0e6      	beq.n	8005e4c <_printf_common+0xa4>
 8005e7e:	3601      	adds	r6, #1
 8005e80:	e7d9      	b.n	8005e36 <_printf_common+0x8e>
	...

08005e84 <_printf_i>:
 8005e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	7e0f      	ldrb	r7, [r1, #24]
 8005e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e8c:	2f78      	cmp	r7, #120	@ 0x78
 8005e8e:	4691      	mov	r9, r2
 8005e90:	4680      	mov	r8, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	469a      	mov	sl, r3
 8005e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e9a:	d807      	bhi.n	8005eac <_printf_i+0x28>
 8005e9c:	2f62      	cmp	r7, #98	@ 0x62
 8005e9e:	d80a      	bhi.n	8005eb6 <_printf_i+0x32>
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	f000 80d1 	beq.w	8006048 <_printf_i+0x1c4>
 8005ea6:	2f58      	cmp	r7, #88	@ 0x58
 8005ea8:	f000 80b8 	beq.w	800601c <_printf_i+0x198>
 8005eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005eb4:	e03a      	b.n	8005f2c <_printf_i+0xa8>
 8005eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eba:	2b15      	cmp	r3, #21
 8005ebc:	d8f6      	bhi.n	8005eac <_printf_i+0x28>
 8005ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec4 <_printf_i+0x40>)
 8005ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005ead 	.word	0x08005ead
 8005ed0:	08005ead 	.word	0x08005ead
 8005ed4:	08005ead 	.word	0x08005ead
 8005ed8:	08005ead 	.word	0x08005ead
 8005edc:	08005f31 	.word	0x08005f31
 8005ee0:	08005ead 	.word	0x08005ead
 8005ee4:	08005ead 	.word	0x08005ead
 8005ee8:	08005ead 	.word	0x08005ead
 8005eec:	08005ead 	.word	0x08005ead
 8005ef0:	0800602f 	.word	0x0800602f
 8005ef4:	08005f5b 	.word	0x08005f5b
 8005ef8:	08005fe9 	.word	0x08005fe9
 8005efc:	08005ead 	.word	0x08005ead
 8005f00:	08005ead 	.word	0x08005ead
 8005f04:	08006051 	.word	0x08006051
 8005f08:	08005ead 	.word	0x08005ead
 8005f0c:	08005f5b 	.word	0x08005f5b
 8005f10:	08005ead 	.word	0x08005ead
 8005f14:	08005ead 	.word	0x08005ead
 8005f18:	08005ff1 	.word	0x08005ff1
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	1d1a      	adds	r2, r3, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6032      	str	r2, [r6, #0]
 8005f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e09c      	b.n	800606a <_printf_i+0x1e6>
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	1d19      	adds	r1, r3, #4
 8005f36:	6031      	str	r1, [r6, #0]
 8005f38:	0606      	lsls	r6, r0, #24
 8005f3a:	d501      	bpl.n	8005f40 <_printf_i+0xbc>
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	e003      	b.n	8005f48 <_printf_i+0xc4>
 8005f40:	0645      	lsls	r5, r0, #25
 8005f42:	d5fb      	bpl.n	8005f3c <_printf_i+0xb8>
 8005f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	da03      	bge.n	8005f54 <_printf_i+0xd0>
 8005f4c:	232d      	movs	r3, #45	@ 0x2d
 8005f4e:	426d      	negs	r5, r5
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f54:	4858      	ldr	r0, [pc, #352]	@ (80060b8 <_printf_i+0x234>)
 8005f56:	230a      	movs	r3, #10
 8005f58:	e011      	b.n	8005f7e <_printf_i+0xfa>
 8005f5a:	6821      	ldr	r1, [r4, #0]
 8005f5c:	6833      	ldr	r3, [r6, #0]
 8005f5e:	0608      	lsls	r0, r1, #24
 8005f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f64:	d402      	bmi.n	8005f6c <_printf_i+0xe8>
 8005f66:	0649      	lsls	r1, r1, #25
 8005f68:	bf48      	it	mi
 8005f6a:	b2ad      	uxthmi	r5, r5
 8005f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f6e:	4852      	ldr	r0, [pc, #328]	@ (80060b8 <_printf_i+0x234>)
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	bf14      	ite	ne
 8005f74:	230a      	movne	r3, #10
 8005f76:	2308      	moveq	r3, #8
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f7e:	6866      	ldr	r6, [r4, #4]
 8005f80:	60a6      	str	r6, [r4, #8]
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	db05      	blt.n	8005f92 <_printf_i+0x10e>
 8005f86:	6821      	ldr	r1, [r4, #0]
 8005f88:	432e      	orrs	r6, r5
 8005f8a:	f021 0104 	bic.w	r1, r1, #4
 8005f8e:	6021      	str	r1, [r4, #0]
 8005f90:	d04b      	beq.n	800602a <_printf_i+0x1a6>
 8005f92:	4616      	mov	r6, r2
 8005f94:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f98:	fb03 5711 	mls	r7, r3, r1, r5
 8005f9c:	5dc7      	ldrb	r7, [r0, r7]
 8005f9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fa2:	462f      	mov	r7, r5
 8005fa4:	42bb      	cmp	r3, r7
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	d9f4      	bls.n	8005f94 <_printf_i+0x110>
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d10b      	bne.n	8005fc6 <_printf_i+0x142>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	07df      	lsls	r7, r3, #31
 8005fb2:	d508      	bpl.n	8005fc6 <_printf_i+0x142>
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	bfde      	ittt	le
 8005fbc:	2330      	movle	r3, #48	@ 0x30
 8005fbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fc6:	1b92      	subs	r2, r2, r6
 8005fc8:	6122      	str	r2, [r4, #16]
 8005fca:	f8cd a000 	str.w	sl, [sp]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	aa03      	add	r2, sp, #12
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	f7ff fee7 	bl	8005da8 <_printf_common>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d14a      	bne.n	8006074 <_printf_i+0x1f0>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	b004      	add	sp, #16
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f043 0320 	orr.w	r3, r3, #32
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	4832      	ldr	r0, [pc, #200]	@ (80060bc <_printf_i+0x238>)
 8005ff2:	2778      	movs	r7, #120	@ 0x78
 8005ff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	6831      	ldr	r1, [r6, #0]
 8005ffc:	061f      	lsls	r7, r3, #24
 8005ffe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006002:	d402      	bmi.n	800600a <_printf_i+0x186>
 8006004:	065f      	lsls	r7, r3, #25
 8006006:	bf48      	it	mi
 8006008:	b2ad      	uxthmi	r5, r5
 800600a:	6031      	str	r1, [r6, #0]
 800600c:	07d9      	lsls	r1, r3, #31
 800600e:	bf44      	itt	mi
 8006010:	f043 0320 	orrmi.w	r3, r3, #32
 8006014:	6023      	strmi	r3, [r4, #0]
 8006016:	b11d      	cbz	r5, 8006020 <_printf_i+0x19c>
 8006018:	2310      	movs	r3, #16
 800601a:	e7ad      	b.n	8005f78 <_printf_i+0xf4>
 800601c:	4826      	ldr	r0, [pc, #152]	@ (80060b8 <_printf_i+0x234>)
 800601e:	e7e9      	b.n	8005ff4 <_printf_i+0x170>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	f023 0320 	bic.w	r3, r3, #32
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	e7f6      	b.n	8006018 <_printf_i+0x194>
 800602a:	4616      	mov	r6, r2
 800602c:	e7bd      	b.n	8005faa <_printf_i+0x126>
 800602e:	6833      	ldr	r3, [r6, #0]
 8006030:	6825      	ldr	r5, [r4, #0]
 8006032:	6961      	ldr	r1, [r4, #20]
 8006034:	1d18      	adds	r0, r3, #4
 8006036:	6030      	str	r0, [r6, #0]
 8006038:	062e      	lsls	r6, r5, #24
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	d501      	bpl.n	8006042 <_printf_i+0x1be>
 800603e:	6019      	str	r1, [r3, #0]
 8006040:	e002      	b.n	8006048 <_printf_i+0x1c4>
 8006042:	0668      	lsls	r0, r5, #25
 8006044:	d5fb      	bpl.n	800603e <_printf_i+0x1ba>
 8006046:	8019      	strh	r1, [r3, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	4616      	mov	r6, r2
 800604e:	e7bc      	b.n	8005fca <_printf_i+0x146>
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	6032      	str	r2, [r6, #0]
 8006056:	681e      	ldr	r6, [r3, #0]
 8006058:	6862      	ldr	r2, [r4, #4]
 800605a:	2100      	movs	r1, #0
 800605c:	4630      	mov	r0, r6
 800605e:	f7fa f8bf 	bl	80001e0 <memchr>
 8006062:	b108      	cbz	r0, 8006068 <_printf_i+0x1e4>
 8006064:	1b80      	subs	r0, r0, r6
 8006066:	6060      	str	r0, [r4, #4]
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	2300      	movs	r3, #0
 800606e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006072:	e7aa      	b.n	8005fca <_printf_i+0x146>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	4632      	mov	r2, r6
 8006078:	4649      	mov	r1, r9
 800607a:	4640      	mov	r0, r8
 800607c:	47d0      	blx	sl
 800607e:	3001      	adds	r0, #1
 8006080:	d0ad      	beq.n	8005fde <_printf_i+0x15a>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	079b      	lsls	r3, r3, #30
 8006086:	d413      	bmi.n	80060b0 <_printf_i+0x22c>
 8006088:	68e0      	ldr	r0, [r4, #12]
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	4298      	cmp	r0, r3
 800608e:	bfb8      	it	lt
 8006090:	4618      	movlt	r0, r3
 8006092:	e7a6      	b.n	8005fe2 <_printf_i+0x15e>
 8006094:	2301      	movs	r3, #1
 8006096:	4632      	mov	r2, r6
 8006098:	4649      	mov	r1, r9
 800609a:	4640      	mov	r0, r8
 800609c:	47d0      	blx	sl
 800609e:	3001      	adds	r0, #1
 80060a0:	d09d      	beq.n	8005fde <_printf_i+0x15a>
 80060a2:	3501      	adds	r5, #1
 80060a4:	68e3      	ldr	r3, [r4, #12]
 80060a6:	9903      	ldr	r1, [sp, #12]
 80060a8:	1a5b      	subs	r3, r3, r1
 80060aa:	42ab      	cmp	r3, r5
 80060ac:	dcf2      	bgt.n	8006094 <_printf_i+0x210>
 80060ae:	e7eb      	b.n	8006088 <_printf_i+0x204>
 80060b0:	2500      	movs	r5, #0
 80060b2:	f104 0619 	add.w	r6, r4, #25
 80060b6:	e7f5      	b.n	80060a4 <_printf_i+0x220>
 80060b8:	0800884d 	.word	0x0800884d
 80060bc:	0800885e 	.word	0x0800885e

080060c0 <memmove>:
 80060c0:	4288      	cmp	r0, r1
 80060c2:	b510      	push	{r4, lr}
 80060c4:	eb01 0402 	add.w	r4, r1, r2
 80060c8:	d902      	bls.n	80060d0 <memmove+0x10>
 80060ca:	4284      	cmp	r4, r0
 80060cc:	4623      	mov	r3, r4
 80060ce:	d807      	bhi.n	80060e0 <memmove+0x20>
 80060d0:	1e43      	subs	r3, r0, #1
 80060d2:	42a1      	cmp	r1, r4
 80060d4:	d008      	beq.n	80060e8 <memmove+0x28>
 80060d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060de:	e7f8      	b.n	80060d2 <memmove+0x12>
 80060e0:	4402      	add	r2, r0
 80060e2:	4601      	mov	r1, r0
 80060e4:	428a      	cmp	r2, r1
 80060e6:	d100      	bne.n	80060ea <memmove+0x2a>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060f2:	e7f7      	b.n	80060e4 <memmove+0x24>

080060f4 <_sbrk_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d06      	ldr	r5, [pc, #24]	@ (8006110 <_sbrk_r+0x1c>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	f7fc fcae 	bl	8002a60 <_sbrk>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_sbrk_r+0x1a>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_sbrk_r+0x1a>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	200008e0 	.word	0x200008e0

08006114 <memcpy>:
 8006114:	440a      	add	r2, r1
 8006116:	4291      	cmp	r1, r2
 8006118:	f100 33ff 	add.w	r3, r0, #4294967295
 800611c:	d100      	bne.n	8006120 <memcpy+0xc>
 800611e:	4770      	bx	lr
 8006120:	b510      	push	{r4, lr}
 8006122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800612a:	4291      	cmp	r1, r2
 800612c:	d1f9      	bne.n	8006122 <memcpy+0xe>
 800612e:	bd10      	pop	{r4, pc}

08006130 <_realloc_r>:
 8006130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006134:	4607      	mov	r7, r0
 8006136:	4614      	mov	r4, r2
 8006138:	460d      	mov	r5, r1
 800613a:	b921      	cbnz	r1, 8006146 <_realloc_r+0x16>
 800613c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006140:	4611      	mov	r1, r2
 8006142:	f7ff bc4d 	b.w	80059e0 <_malloc_r>
 8006146:	b92a      	cbnz	r2, 8006154 <_realloc_r+0x24>
 8006148:	f7ff fbde 	bl	8005908 <_free_r>
 800614c:	4625      	mov	r5, r4
 800614e:	4628      	mov	r0, r5
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006154:	f000 f81a 	bl	800618c <_malloc_usable_size_r>
 8006158:	4284      	cmp	r4, r0
 800615a:	4606      	mov	r6, r0
 800615c:	d802      	bhi.n	8006164 <_realloc_r+0x34>
 800615e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006162:	d8f4      	bhi.n	800614e <_realloc_r+0x1e>
 8006164:	4621      	mov	r1, r4
 8006166:	4638      	mov	r0, r7
 8006168:	f7ff fc3a 	bl	80059e0 <_malloc_r>
 800616c:	4680      	mov	r8, r0
 800616e:	b908      	cbnz	r0, 8006174 <_realloc_r+0x44>
 8006170:	4645      	mov	r5, r8
 8006172:	e7ec      	b.n	800614e <_realloc_r+0x1e>
 8006174:	42b4      	cmp	r4, r6
 8006176:	4622      	mov	r2, r4
 8006178:	4629      	mov	r1, r5
 800617a:	bf28      	it	cs
 800617c:	4632      	movcs	r2, r6
 800617e:	f7ff ffc9 	bl	8006114 <memcpy>
 8006182:	4629      	mov	r1, r5
 8006184:	4638      	mov	r0, r7
 8006186:	f7ff fbbf 	bl	8005908 <_free_r>
 800618a:	e7f1      	b.n	8006170 <_realloc_r+0x40>

0800618c <_malloc_usable_size_r>:
 800618c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006190:	1f18      	subs	r0, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfbc      	itt	lt
 8006196:	580b      	ldrlt	r3, [r1, r0]
 8006198:	18c0      	addlt	r0, r0, r3
 800619a:	4770      	bx	lr

0800619c <sqrt>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	ed2d 8b02 	vpush	{d8}
 80061a2:	ec55 4b10 	vmov	r4, r5, d0
 80061a6:	f000 f8cf 	bl	8006348 <__ieee754_sqrt>
 80061aa:	4622      	mov	r2, r4
 80061ac:	462b      	mov	r3, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	eeb0 8a40 	vmov.f32	s16, s0
 80061b6:	eef0 8a60 	vmov.f32	s17, s1
 80061ba:	f7fa fcb7 	bl	8000b2c <__aeabi_dcmpun>
 80061be:	b990      	cbnz	r0, 80061e6 <sqrt+0x4a>
 80061c0:	2200      	movs	r2, #0
 80061c2:	2300      	movs	r3, #0
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa fc88 	bl	8000adc <__aeabi_dcmplt>
 80061cc:	b158      	cbz	r0, 80061e6 <sqrt+0x4a>
 80061ce:	f7ff fb6f 	bl	80058b0 <__errno>
 80061d2:	2321      	movs	r3, #33	@ 0x21
 80061d4:	6003      	str	r3, [r0, #0]
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	f7fa fb35 	bl	800084c <__aeabi_ddiv>
 80061e2:	ec41 0b18 	vmov	d8, r0, r1
 80061e6:	eeb0 0a48 	vmov.f32	s0, s16
 80061ea:	eef0 0a68 	vmov.f32	s1, s17
 80061ee:	ecbd 8b02 	vpop	{d8}
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	0000      	movs	r0, r0
	...

080061f8 <cos>:
 80061f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061fa:	ec53 2b10 	vmov	r2, r3, d0
 80061fe:	4826      	ldr	r0, [pc, #152]	@ (8006298 <cos+0xa0>)
 8006200:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006204:	4281      	cmp	r1, r0
 8006206:	d806      	bhi.n	8006216 <cos+0x1e>
 8006208:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006290 <cos+0x98>
 800620c:	b005      	add	sp, #20
 800620e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006212:	f000 b971 	b.w	80064f8 <__kernel_cos>
 8006216:	4821      	ldr	r0, [pc, #132]	@ (800629c <cos+0xa4>)
 8006218:	4281      	cmp	r1, r0
 800621a:	d908      	bls.n	800622e <cos+0x36>
 800621c:	4610      	mov	r0, r2
 800621e:	4619      	mov	r1, r3
 8006220:	f7fa f832 	bl	8000288 <__aeabi_dsub>
 8006224:	ec41 0b10 	vmov	d0, r0, r1
 8006228:	b005      	add	sp, #20
 800622a:	f85d fb04 	ldr.w	pc, [sp], #4
 800622e:	4668      	mov	r0, sp
 8006230:	f000 fae6 	bl	8006800 <__ieee754_rem_pio2>
 8006234:	f000 0003 	and.w	r0, r0, #3
 8006238:	2801      	cmp	r0, #1
 800623a:	d00b      	beq.n	8006254 <cos+0x5c>
 800623c:	2802      	cmp	r0, #2
 800623e:	d015      	beq.n	800626c <cos+0x74>
 8006240:	b9d8      	cbnz	r0, 800627a <cos+0x82>
 8006242:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006246:	ed9d 0b00 	vldr	d0, [sp]
 800624a:	f000 f955 	bl	80064f8 <__kernel_cos>
 800624e:	ec51 0b10 	vmov	r0, r1, d0
 8006252:	e7e7      	b.n	8006224 <cos+0x2c>
 8006254:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006258:	ed9d 0b00 	vldr	d0, [sp]
 800625c:	f000 fa14 	bl	8006688 <__kernel_sin>
 8006260:	ec53 2b10 	vmov	r2, r3, d0
 8006264:	4610      	mov	r0, r2
 8006266:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800626a:	e7db      	b.n	8006224 <cos+0x2c>
 800626c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006270:	ed9d 0b00 	vldr	d0, [sp]
 8006274:	f000 f940 	bl	80064f8 <__kernel_cos>
 8006278:	e7f2      	b.n	8006260 <cos+0x68>
 800627a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800627e:	ed9d 0b00 	vldr	d0, [sp]
 8006282:	2001      	movs	r0, #1
 8006284:	f000 fa00 	bl	8006688 <__kernel_sin>
 8006288:	e7e1      	b.n	800624e <cos+0x56>
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w
	...
 8006298:	3fe921fb 	.word	0x3fe921fb
 800629c:	7fefffff 	.word	0x7fefffff

080062a0 <sin>:
 80062a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062a2:	ec53 2b10 	vmov	r2, r3, d0
 80062a6:	4826      	ldr	r0, [pc, #152]	@ (8006340 <sin+0xa0>)
 80062a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062ac:	4281      	cmp	r1, r0
 80062ae:	d807      	bhi.n	80062c0 <sin+0x20>
 80062b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006338 <sin+0x98>
 80062b4:	2000      	movs	r0, #0
 80062b6:	b005      	add	sp, #20
 80062b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062bc:	f000 b9e4 	b.w	8006688 <__kernel_sin>
 80062c0:	4820      	ldr	r0, [pc, #128]	@ (8006344 <sin+0xa4>)
 80062c2:	4281      	cmp	r1, r0
 80062c4:	d908      	bls.n	80062d8 <sin+0x38>
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7f9 ffdd 	bl	8000288 <__aeabi_dsub>
 80062ce:	ec41 0b10 	vmov	d0, r0, r1
 80062d2:	b005      	add	sp, #20
 80062d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d8:	4668      	mov	r0, sp
 80062da:	f000 fa91 	bl	8006800 <__ieee754_rem_pio2>
 80062de:	f000 0003 	and.w	r0, r0, #3
 80062e2:	2801      	cmp	r0, #1
 80062e4:	d00c      	beq.n	8006300 <sin+0x60>
 80062e6:	2802      	cmp	r0, #2
 80062e8:	d011      	beq.n	800630e <sin+0x6e>
 80062ea:	b9e8      	cbnz	r0, 8006328 <sin+0x88>
 80062ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062f0:	ed9d 0b00 	vldr	d0, [sp]
 80062f4:	2001      	movs	r0, #1
 80062f6:	f000 f9c7 	bl	8006688 <__kernel_sin>
 80062fa:	ec51 0b10 	vmov	r0, r1, d0
 80062fe:	e7e6      	b.n	80062ce <sin+0x2e>
 8006300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006304:	ed9d 0b00 	vldr	d0, [sp]
 8006308:	f000 f8f6 	bl	80064f8 <__kernel_cos>
 800630c:	e7f5      	b.n	80062fa <sin+0x5a>
 800630e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006312:	ed9d 0b00 	vldr	d0, [sp]
 8006316:	2001      	movs	r0, #1
 8006318:	f000 f9b6 	bl	8006688 <__kernel_sin>
 800631c:	ec53 2b10 	vmov	r2, r3, d0
 8006320:	4610      	mov	r0, r2
 8006322:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006326:	e7d2      	b.n	80062ce <sin+0x2e>
 8006328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800632c:	ed9d 0b00 	vldr	d0, [sp]
 8006330:	f000 f8e2 	bl	80064f8 <__kernel_cos>
 8006334:	e7f2      	b.n	800631c <sin+0x7c>
 8006336:	bf00      	nop
	...
 8006340:	3fe921fb 	.word	0x3fe921fb
 8006344:	7fefffff 	.word	0x7fefffff

08006348 <__ieee754_sqrt>:
 8006348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	4a66      	ldr	r2, [pc, #408]	@ (80064e8 <__ieee754_sqrt+0x1a0>)
 800634e:	ec55 4b10 	vmov	r4, r5, d0
 8006352:	43aa      	bics	r2, r5
 8006354:	462b      	mov	r3, r5
 8006356:	4621      	mov	r1, r4
 8006358:	d110      	bne.n	800637c <__ieee754_sqrt+0x34>
 800635a:	4622      	mov	r2, r4
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	f7fa f94a 	bl	80005f8 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4620      	mov	r0, r4
 800636a:	4629      	mov	r1, r5
 800636c:	f7f9 ff8e 	bl	800028c <__adddf3>
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	ec45 4b10 	vmov	d0, r4, r5
 8006378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	2d00      	cmp	r5, #0
 800637e:	dc0e      	bgt.n	800639e <__ieee754_sqrt+0x56>
 8006380:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006384:	4322      	orrs	r2, r4
 8006386:	d0f5      	beq.n	8006374 <__ieee754_sqrt+0x2c>
 8006388:	b19d      	cbz	r5, 80063b2 <__ieee754_sqrt+0x6a>
 800638a:	4622      	mov	r2, r4
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 ff7a 	bl	8000288 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	f7fa fa58 	bl	800084c <__aeabi_ddiv>
 800639c:	e7e8      	b.n	8006370 <__ieee754_sqrt+0x28>
 800639e:	152a      	asrs	r2, r5, #20
 80063a0:	d115      	bne.n	80063ce <__ieee754_sqrt+0x86>
 80063a2:	2000      	movs	r0, #0
 80063a4:	e009      	b.n	80063ba <__ieee754_sqrt+0x72>
 80063a6:	0acb      	lsrs	r3, r1, #11
 80063a8:	3a15      	subs	r2, #21
 80063aa:	0549      	lsls	r1, r1, #21
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0fa      	beq.n	80063a6 <__ieee754_sqrt+0x5e>
 80063b0:	e7f7      	b.n	80063a2 <__ieee754_sqrt+0x5a>
 80063b2:	462a      	mov	r2, r5
 80063b4:	e7fa      	b.n	80063ac <__ieee754_sqrt+0x64>
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	3001      	adds	r0, #1
 80063ba:	02dc      	lsls	r4, r3, #11
 80063bc:	d5fb      	bpl.n	80063b6 <__ieee754_sqrt+0x6e>
 80063be:	1e44      	subs	r4, r0, #1
 80063c0:	1b12      	subs	r2, r2, r4
 80063c2:	f1c0 0420 	rsb	r4, r0, #32
 80063c6:	fa21 f404 	lsr.w	r4, r1, r4
 80063ca:	4323      	orrs	r3, r4
 80063cc:	4081      	lsls	r1, r0
 80063ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063da:	07d2      	lsls	r2, r2, #31
 80063dc:	bf5c      	itt	pl
 80063de:	005b      	lslpl	r3, r3, #1
 80063e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80063e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063e8:	bf58      	it	pl
 80063ea:	0049      	lslpl	r1, r1, #1
 80063ec:	2600      	movs	r6, #0
 80063ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80063f2:	107f      	asrs	r7, r7, #1
 80063f4:	0049      	lsls	r1, r1, #1
 80063f6:	2016      	movs	r0, #22
 80063f8:	4632      	mov	r2, r6
 80063fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80063fe:	1915      	adds	r5, r2, r4
 8006400:	429d      	cmp	r5, r3
 8006402:	bfde      	ittt	le
 8006404:	192a      	addle	r2, r5, r4
 8006406:	1b5b      	suble	r3, r3, r5
 8006408:	1936      	addle	r6, r6, r4
 800640a:	0fcd      	lsrs	r5, r1, #31
 800640c:	3801      	subs	r0, #1
 800640e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006412:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006416:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800641a:	d1f0      	bne.n	80063fe <__ieee754_sqrt+0xb6>
 800641c:	4605      	mov	r5, r0
 800641e:	2420      	movs	r4, #32
 8006420:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006424:	4293      	cmp	r3, r2
 8006426:	eb0c 0e00 	add.w	lr, ip, r0
 800642a:	dc02      	bgt.n	8006432 <__ieee754_sqrt+0xea>
 800642c:	d113      	bne.n	8006456 <__ieee754_sqrt+0x10e>
 800642e:	458e      	cmp	lr, r1
 8006430:	d811      	bhi.n	8006456 <__ieee754_sqrt+0x10e>
 8006432:	f1be 0f00 	cmp.w	lr, #0
 8006436:	eb0e 000c 	add.w	r0, lr, ip
 800643a:	da3f      	bge.n	80064bc <__ieee754_sqrt+0x174>
 800643c:	2800      	cmp	r0, #0
 800643e:	db3d      	blt.n	80064bc <__ieee754_sqrt+0x174>
 8006440:	f102 0801 	add.w	r8, r2, #1
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	458e      	cmp	lr, r1
 8006448:	bf88      	it	hi
 800644a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800644e:	eba1 010e 	sub.w	r1, r1, lr
 8006452:	4465      	add	r5, ip
 8006454:	4642      	mov	r2, r8
 8006456:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800645a:	3c01      	subs	r4, #1
 800645c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006460:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006464:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006468:	d1dc      	bne.n	8006424 <__ieee754_sqrt+0xdc>
 800646a:	4319      	orrs	r1, r3
 800646c:	d01b      	beq.n	80064a6 <__ieee754_sqrt+0x15e>
 800646e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80064ec <__ieee754_sqrt+0x1a4>
 8006472:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80064f0 <__ieee754_sqrt+0x1a8>
 8006476:	e9da 0100 	ldrd	r0, r1, [sl]
 800647a:	e9db 2300 	ldrd	r2, r3, [fp]
 800647e:	f7f9 ff03 	bl	8000288 <__aeabi_dsub>
 8006482:	e9da 8900 	ldrd	r8, r9, [sl]
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7fa fb2f 	bl	8000af0 <__aeabi_dcmple>
 8006492:	b140      	cbz	r0, 80064a6 <__ieee754_sqrt+0x15e>
 8006494:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006498:	e9da 0100 	ldrd	r0, r1, [sl]
 800649c:	e9db 2300 	ldrd	r2, r3, [fp]
 80064a0:	d10e      	bne.n	80064c0 <__ieee754_sqrt+0x178>
 80064a2:	3601      	adds	r6, #1
 80064a4:	4625      	mov	r5, r4
 80064a6:	1073      	asrs	r3, r6, #1
 80064a8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80064ac:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80064b0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80064b4:	086b      	lsrs	r3, r5, #1
 80064b6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80064ba:	e759      	b.n	8006370 <__ieee754_sqrt+0x28>
 80064bc:	4690      	mov	r8, r2
 80064be:	e7c1      	b.n	8006444 <__ieee754_sqrt+0xfc>
 80064c0:	f7f9 fee4 	bl	800028c <__adddf3>
 80064c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7fa fb04 	bl	8000adc <__aeabi_dcmplt>
 80064d4:	b120      	cbz	r0, 80064e0 <__ieee754_sqrt+0x198>
 80064d6:	1cab      	adds	r3, r5, #2
 80064d8:	bf08      	it	eq
 80064da:	3601      	addeq	r6, #1
 80064dc:	3502      	adds	r5, #2
 80064de:	e7e2      	b.n	80064a6 <__ieee754_sqrt+0x15e>
 80064e0:	1c6b      	adds	r3, r5, #1
 80064e2:	f023 0501 	bic.w	r5, r3, #1
 80064e6:	e7de      	b.n	80064a6 <__ieee754_sqrt+0x15e>
 80064e8:	7ff00000 	.word	0x7ff00000
 80064ec:	08008878 	.word	0x08008878
 80064f0:	08008870 	.word	0x08008870
 80064f4:	00000000 	.word	0x00000000

080064f8 <__kernel_cos>:
 80064f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	ec57 6b10 	vmov	r6, r7, d0
 8006500:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006504:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006508:	ed8d 1b00 	vstr	d1, [sp]
 800650c:	d206      	bcs.n	800651c <__kernel_cos+0x24>
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7fa fb21 	bl	8000b58 <__aeabi_d2iz>
 8006516:	2800      	cmp	r0, #0
 8006518:	f000 8088 	beq.w	800662c <__kernel_cos+0x134>
 800651c:	4632      	mov	r2, r6
 800651e:	463b      	mov	r3, r7
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	4b51      	ldr	r3, [pc, #324]	@ (8006670 <__kernel_cos+0x178>)
 800652a:	2200      	movs	r2, #0
 800652c:	4604      	mov	r4, r0
 800652e:	460d      	mov	r5, r1
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	a340      	add	r3, pc, #256	@ (adr r3, 8006638 <__kernel_cos+0x140>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	4682      	mov	sl, r0
 800653c:	468b      	mov	fp, r1
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	f7fa f859 	bl	80005f8 <__aeabi_dmul>
 8006546:	a33e      	add	r3, pc, #248	@ (adr r3, 8006640 <__kernel_cos+0x148>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7f9 fe9e 	bl	800028c <__adddf3>
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	f7fa f850 	bl	80005f8 <__aeabi_dmul>
 8006558:	a33b      	add	r3, pc, #236	@ (adr r3, 8006648 <__kernel_cos+0x150>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f7f9 fe93 	bl	8000288 <__aeabi_dsub>
 8006562:	4622      	mov	r2, r4
 8006564:	462b      	mov	r3, r5
 8006566:	f7fa f847 	bl	80005f8 <__aeabi_dmul>
 800656a:	a339      	add	r3, pc, #228	@ (adr r3, 8006650 <__kernel_cos+0x158>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 fe8c 	bl	800028c <__adddf3>
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	a336      	add	r3, pc, #216	@ (adr r3, 8006658 <__kernel_cos+0x160>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fe81 	bl	8000288 <__aeabi_dsub>
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f7fa f835 	bl	80005f8 <__aeabi_dmul>
 800658e:	a334      	add	r3, pc, #208	@ (adr r3, 8006660 <__kernel_cos+0x168>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7f9 fe7a 	bl	800028c <__adddf3>
 8006598:	4622      	mov	r2, r4
 800659a:	462b      	mov	r3, r5
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	4622      	mov	r2, r4
 80065a2:	462b      	mov	r3, r5
 80065a4:	f7fa f828 	bl	80005f8 <__aeabi_dmul>
 80065a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ac:	4604      	mov	r4, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7fa f820 	bl	80005f8 <__aeabi_dmul>
 80065b8:	460b      	mov	r3, r1
 80065ba:	4602      	mov	r2, r0
 80065bc:	4629      	mov	r1, r5
 80065be:	4620      	mov	r0, r4
 80065c0:	f7f9 fe62 	bl	8000288 <__aeabi_dsub>
 80065c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006674 <__kernel_cos+0x17c>)
 80065c6:	4598      	cmp	r8, r3
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	d810      	bhi.n	80065f0 <__kernel_cos+0xf8>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7f9 fe57 	bl	8000288 <__aeabi_dsub>
 80065da:	460b      	mov	r3, r1
 80065dc:	4926      	ldr	r1, [pc, #152]	@ (8006678 <__kernel_cos+0x180>)
 80065de:	4602      	mov	r2, r0
 80065e0:	2000      	movs	r0, #0
 80065e2:	f7f9 fe51 	bl	8000288 <__aeabi_dsub>
 80065e6:	ec41 0b10 	vmov	d0, r0, r1
 80065ea:	b003      	add	sp, #12
 80065ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f0:	4b22      	ldr	r3, [pc, #136]	@ (800667c <__kernel_cos+0x184>)
 80065f2:	4921      	ldr	r1, [pc, #132]	@ (8006678 <__kernel_cos+0x180>)
 80065f4:	4598      	cmp	r8, r3
 80065f6:	bf8c      	ite	hi
 80065f8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006680 <__kernel_cos+0x188>)
 80065fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80065fe:	2400      	movs	r4, #0
 8006600:	4622      	mov	r2, r4
 8006602:	462b      	mov	r3, r5
 8006604:	2000      	movs	r0, #0
 8006606:	f7f9 fe3f 	bl	8000288 <__aeabi_dsub>
 800660a:	4622      	mov	r2, r4
 800660c:	4680      	mov	r8, r0
 800660e:	4689      	mov	r9, r1
 8006610:	462b      	mov	r3, r5
 8006612:	4650      	mov	r0, sl
 8006614:	4659      	mov	r1, fp
 8006616:	f7f9 fe37 	bl	8000288 <__aeabi_dsub>
 800661a:	4632      	mov	r2, r6
 800661c:	463b      	mov	r3, r7
 800661e:	f7f9 fe33 	bl	8000288 <__aeabi_dsub>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	e7da      	b.n	80065e2 <__kernel_cos+0xea>
 800662c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006668 <__kernel_cos+0x170>
 8006630:	e7db      	b.n	80065ea <__kernel_cos+0xf2>
 8006632:	bf00      	nop
 8006634:	f3af 8000 	nop.w
 8006638:	be8838d4 	.word	0xbe8838d4
 800663c:	bda8fae9 	.word	0xbda8fae9
 8006640:	bdb4b1c4 	.word	0xbdb4b1c4
 8006644:	3e21ee9e 	.word	0x3e21ee9e
 8006648:	809c52ad 	.word	0x809c52ad
 800664c:	3e927e4f 	.word	0x3e927e4f
 8006650:	19cb1590 	.word	0x19cb1590
 8006654:	3efa01a0 	.word	0x3efa01a0
 8006658:	16c15177 	.word	0x16c15177
 800665c:	3f56c16c 	.word	0x3f56c16c
 8006660:	5555554c 	.word	0x5555554c
 8006664:	3fa55555 	.word	0x3fa55555
 8006668:	00000000 	.word	0x00000000
 800666c:	3ff00000 	.word	0x3ff00000
 8006670:	3fe00000 	.word	0x3fe00000
 8006674:	3fd33332 	.word	0x3fd33332
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	3fe90000 	.word	0x3fe90000
 8006680:	3fd20000 	.word	0x3fd20000
 8006684:	00000000 	.word	0x00000000

08006688 <__kernel_sin>:
 8006688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	ec55 4b10 	vmov	r4, r5, d0
 8006690:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006694:	b085      	sub	sp, #20
 8006696:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800669a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800669e:	4680      	mov	r8, r0
 80066a0:	d205      	bcs.n	80066ae <__kernel_sin+0x26>
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7fa fa57 	bl	8000b58 <__aeabi_d2iz>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d052      	beq.n	8006754 <__kernel_sin+0xcc>
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7f9 ff9f 	bl	80005f8 <__aeabi_dmul>
 80066ba:	4682      	mov	sl, r0
 80066bc:	468b      	mov	fp, r1
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4620      	mov	r0, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7f9 ff97 	bl	80005f8 <__aeabi_dmul>
 80066ca:	a342      	add	r3, pc, #264	@ (adr r3, 80067d4 <__kernel_sin+0x14c>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	e9cd 0100 	strd	r0, r1, [sp]
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7f9 ff8e 	bl	80005f8 <__aeabi_dmul>
 80066dc:	a33f      	add	r3, pc, #252	@ (adr r3, 80067dc <__kernel_sin+0x154>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fdd1 	bl	8000288 <__aeabi_dsub>
 80066e6:	4652      	mov	r2, sl
 80066e8:	465b      	mov	r3, fp
 80066ea:	f7f9 ff85 	bl	80005f8 <__aeabi_dmul>
 80066ee:	a33d      	add	r3, pc, #244	@ (adr r3, 80067e4 <__kernel_sin+0x15c>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fdca 	bl	800028c <__adddf3>
 80066f8:	4652      	mov	r2, sl
 80066fa:	465b      	mov	r3, fp
 80066fc:	f7f9 ff7c 	bl	80005f8 <__aeabi_dmul>
 8006700:	a33a      	add	r3, pc, #232	@ (adr r3, 80067ec <__kernel_sin+0x164>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fdbf 	bl	8000288 <__aeabi_dsub>
 800670a:	4652      	mov	r2, sl
 800670c:	465b      	mov	r3, fp
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	a338      	add	r3, pc, #224	@ (adr r3, 80067f4 <__kernel_sin+0x16c>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fdb8 	bl	800028c <__adddf3>
 800671c:	4606      	mov	r6, r0
 800671e:	460f      	mov	r7, r1
 8006720:	f1b8 0f00 	cmp.w	r8, #0
 8006724:	d11b      	bne.n	800675e <__kernel_sin+0xd6>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4650      	mov	r0, sl
 800672c:	4659      	mov	r1, fp
 800672e:	f7f9 ff63 	bl	80005f8 <__aeabi_dmul>
 8006732:	a325      	add	r3, pc, #148	@ (adr r3, 80067c8 <__kernel_sin+0x140>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fda6 	bl	8000288 <__aeabi_dsub>
 800673c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4620      	mov	r0, r4
 800674a:	4629      	mov	r1, r5
 800674c:	f7f9 fd9e 	bl	800028c <__adddf3>
 8006750:	4604      	mov	r4, r0
 8006752:	460d      	mov	r5, r1
 8006754:	ec45 4b10 	vmov	d0, r4, r5
 8006758:	b005      	add	sp, #20
 800675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006762:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <__kernel_sin+0x148>)
 8006764:	2200      	movs	r2, #0
 8006766:	f7f9 ff47 	bl	80005f8 <__aeabi_dmul>
 800676a:	4632      	mov	r2, r6
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	463b      	mov	r3, r7
 8006772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006776:	f7f9 ff3f 	bl	80005f8 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7f9 fd81 	bl	8000288 <__aeabi_dsub>
 8006786:	4652      	mov	r2, sl
 8006788:	465b      	mov	r3, fp
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006792:	f7f9 fd79 	bl	8000288 <__aeabi_dsub>
 8006796:	a30c      	add	r3, pc, #48	@ (adr r3, 80067c8 <__kernel_sin+0x140>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	4606      	mov	r6, r0
 800679e:	460f      	mov	r7, r1
 80067a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 fd6c 	bl	800028c <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7f9 fd64 	bl	8000288 <__aeabi_dsub>
 80067c0:	e7c6      	b.n	8006750 <__kernel_sin+0xc8>
 80067c2:	bf00      	nop
 80067c4:	f3af 8000 	nop.w
 80067c8:	55555549 	.word	0x55555549
 80067cc:	3fc55555 	.word	0x3fc55555
 80067d0:	3fe00000 	.word	0x3fe00000
 80067d4:	5acfd57c 	.word	0x5acfd57c
 80067d8:	3de5d93a 	.word	0x3de5d93a
 80067dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80067e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80067e4:	57b1fe7d 	.word	0x57b1fe7d
 80067e8:	3ec71de3 	.word	0x3ec71de3
 80067ec:	19c161d5 	.word	0x19c161d5
 80067f0:	3f2a01a0 	.word	0x3f2a01a0
 80067f4:	1110f8a6 	.word	0x1110f8a6
 80067f8:	3f811111 	.word	0x3f811111
 80067fc:	00000000 	.word	0x00000000

08006800 <__ieee754_rem_pio2>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	ec57 6b10 	vmov	r6, r7, d0
 8006808:	4bc5      	ldr	r3, [pc, #788]	@ (8006b20 <__ieee754_rem_pio2+0x320>)
 800680a:	b08d      	sub	sp, #52	@ 0x34
 800680c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006810:	4598      	cmp	r8, r3
 8006812:	4604      	mov	r4, r0
 8006814:	9704      	str	r7, [sp, #16]
 8006816:	d807      	bhi.n	8006828 <__ieee754_rem_pio2+0x28>
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	ed80 0b00 	vstr	d0, [r0]
 8006820:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006824:	2500      	movs	r5, #0
 8006826:	e028      	b.n	800687a <__ieee754_rem_pio2+0x7a>
 8006828:	4bbe      	ldr	r3, [pc, #760]	@ (8006b24 <__ieee754_rem_pio2+0x324>)
 800682a:	4598      	cmp	r8, r3
 800682c:	d878      	bhi.n	8006920 <__ieee754_rem_pio2+0x120>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	4dbd      	ldr	r5, [pc, #756]	@ (8006b28 <__ieee754_rem_pio2+0x328>)
 8006832:	2b00      	cmp	r3, #0
 8006834:	4630      	mov	r0, r6
 8006836:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2e8>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	4639      	mov	r1, r7
 800683e:	dd38      	ble.n	80068b2 <__ieee754_rem_pio2+0xb2>
 8006840:	f7f9 fd22 	bl	8000288 <__aeabi_dsub>
 8006844:	45a8      	cmp	r8, r5
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	d01a      	beq.n	8006882 <__ieee754_rem_pio2+0x82>
 800684c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f0>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fd19 	bl	8000288 <__aeabi_dsub>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4680      	mov	r8, r0
 800685c:	4689      	mov	r9, r1
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fd11 	bl	8000288 <__aeabi_dsub>
 8006866:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f0>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fd0c 	bl	8000288 <__aeabi_dsub>
 8006870:	e9c4 8900 	strd	r8, r9, [r4]
 8006874:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006878:	2501      	movs	r5, #1
 800687a:	4628      	mov	r0, r5
 800687c:	b00d      	add	sp, #52	@ 0x34
 800687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006882:	a39d      	add	r3, pc, #628	@ (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f8>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f7f9 fcfe 	bl	8000288 <__aeabi_dsub>
 800688c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006b00 <__ieee754_rem_pio2+0x300>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	a395      	add	r3, pc, #596	@ (adr r3, 8006b00 <__ieee754_rem_pio2+0x300>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	e7dc      	b.n	800686c <__ieee754_rem_pio2+0x6c>
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	45a8      	cmp	r8, r5
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	d018      	beq.n	80068f0 <__ieee754_rem_pio2+0xf0>
 80068be:	a38c      	add	r3, pc, #560	@ (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f0>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fce2 	bl	800028c <__adddf3>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4680      	mov	r8, r0
 80068ce:	4689      	mov	r9, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	a385      	add	r3, pc, #532	@ (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f0>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fcd5 	bl	800028c <__adddf3>
 80068e2:	f04f 35ff 	mov.w	r5, #4294967295
 80068e6:	e9c4 8900 	strd	r8, r9, [r4]
 80068ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068ee:	e7c4      	b.n	800687a <__ieee754_rem_pio2+0x7a>
 80068f0:	a381      	add	r3, pc, #516	@ (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f8>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fcc9 	bl	800028c <__adddf3>
 80068fa:	a381      	add	r3, pc, #516	@ (adr r3, 8006b00 <__ieee754_rem_pio2+0x300>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	4606      	mov	r6, r0
 8006902:	460f      	mov	r7, r1
 8006904:	f7f9 fcc2 	bl	800028c <__adddf3>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7f9 fcb8 	bl	8000288 <__aeabi_dsub>
 8006918:	a379      	add	r3, pc, #484	@ (adr r3, 8006b00 <__ieee754_rem_pio2+0x300>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	e7de      	b.n	80068de <__ieee754_rem_pio2+0xde>
 8006920:	4b82      	ldr	r3, [pc, #520]	@ (8006b2c <__ieee754_rem_pio2+0x32c>)
 8006922:	4598      	cmp	r8, r3
 8006924:	f200 80d1 	bhi.w	8006aca <__ieee754_rem_pio2+0x2ca>
 8006928:	f000 f966 	bl	8006bf8 <fabs>
 800692c:	ec57 6b10 	vmov	r6, r7, d0
 8006930:	a375      	add	r3, pc, #468	@ (adr r3, 8006b08 <__ieee754_rem_pio2+0x308>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	4630      	mov	r0, r6
 8006938:	4639      	mov	r1, r7
 800693a:	f7f9 fe5d 	bl	80005f8 <__aeabi_dmul>
 800693e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b30 <__ieee754_rem_pio2+0x330>)
 8006940:	2200      	movs	r2, #0
 8006942:	f7f9 fca3 	bl	800028c <__adddf3>
 8006946:	f7fa f907 	bl	8000b58 <__aeabi_d2iz>
 800694a:	4605      	mov	r5, r0
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006958:	a363      	add	r3, pc, #396	@ (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2e8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe4b 	bl	80005f8 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7f9 fc8d 	bl	8000288 <__aeabi_dsub>
 800696e:	a360      	add	r3, pc, #384	@ (adr r3, 8006af0 <__ieee754_rem_pio2+0x2f0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	4682      	mov	sl, r0
 8006976:	468b      	mov	fp, r1
 8006978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697c:	f7f9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8006980:	2d1f      	cmp	r5, #31
 8006982:	4606      	mov	r6, r0
 8006984:	460f      	mov	r7, r1
 8006986:	dc0c      	bgt.n	80069a2 <__ieee754_rem_pio2+0x1a2>
 8006988:	4b6a      	ldr	r3, [pc, #424]	@ (8006b34 <__ieee754_rem_pio2+0x334>)
 800698a:	1e6a      	subs	r2, r5, #1
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	4543      	cmp	r3, r8
 8006992:	d006      	beq.n	80069a2 <__ieee754_rem_pio2+0x1a2>
 8006994:	4632      	mov	r2, r6
 8006996:	463b      	mov	r3, r7
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7f9 fc74 	bl	8000288 <__aeabi_dsub>
 80069a0:	e00e      	b.n	80069c0 <__ieee754_rem_pio2+0x1c0>
 80069a2:	463b      	mov	r3, r7
 80069a4:	4632      	mov	r2, r6
 80069a6:	4650      	mov	r0, sl
 80069a8:	4659      	mov	r1, fp
 80069aa:	f7f9 fc6d 	bl	8000288 <__aeabi_dsub>
 80069ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80069bc:	2b10      	cmp	r3, #16
 80069be:	dc02      	bgt.n	80069c6 <__ieee754_rem_pio2+0x1c6>
 80069c0:	e9c4 0100 	strd	r0, r1, [r4]
 80069c4:	e039      	b.n	8006a3a <__ieee754_rem_pio2+0x23a>
 80069c6:	a34c      	add	r3, pc, #304	@ (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f8>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4650      	mov	r0, sl
 80069de:	4659      	mov	r1, fp
 80069e0:	f7f9 fc52 	bl	8000288 <__aeabi_dsub>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4680      	mov	r8, r0
 80069ea:	4689      	mov	r9, r1
 80069ec:	4650      	mov	r0, sl
 80069ee:	4659      	mov	r1, fp
 80069f0:	f7f9 fc4a 	bl	8000288 <__aeabi_dsub>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	f7f9 fc46 	bl	8000288 <__aeabi_dsub>
 80069fc:	a340      	add	r3, pc, #256	@ (adr r3, 8006b00 <__ieee754_rem_pio2+0x300>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0a:	f7f9 fdf5 	bl	80005f8 <__aeabi_dmul>
 8006a0e:	4632      	mov	r2, r6
 8006a10:	463b      	mov	r3, r7
 8006a12:	f7f9 fc39 	bl	8000288 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc31 	bl	8000288 <__aeabi_dsub>
 8006a26:	9a05      	ldr	r2, [sp, #20]
 8006a28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b31      	cmp	r3, #49	@ 0x31
 8006a30:	dc20      	bgt.n	8006a74 <__ieee754_rem_pio2+0x274>
 8006a32:	e9c4 0100 	strd	r0, r1, [r4]
 8006a36:	46c2      	mov	sl, r8
 8006a38:	46cb      	mov	fp, r9
 8006a3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	4659      	mov	r1, fp
 8006a46:	f7f9 fc1f 	bl	8000288 <__aeabi_dsub>
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	f7f9 fc1b 	bl	8000288 <__aeabi_dsub>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a5a:	f6bf af0e 	bge.w	800687a <__ieee754_rem_pio2+0x7a>
 8006a5e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006a62:	6063      	str	r3, [r4, #4]
 8006a64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a68:	f8c4 8000 	str.w	r8, [r4]
 8006a6c:	60a0      	str	r0, [r4, #8]
 8006a6e:	60e3      	str	r3, [r4, #12]
 8006a70:	426d      	negs	r5, r5
 8006a72:	e702      	b.n	800687a <__ieee754_rem_pio2+0x7a>
 8006a74:	a326      	add	r3, pc, #152	@ (adr r3, 8006b10 <__ieee754_rem_pio2+0x310>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fbfb 	bl	8000288 <__aeabi_dsub>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4682      	mov	sl, r0
 8006a98:	468b      	mov	fp, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	f7f9 fbef 	bl	8000288 <__aeabi_dsub>
 8006aaa:	a31b      	add	r3, pc, #108	@ (adr r3, 8006b18 <__ieee754_rem_pio2+0x318>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f7f9 fbe2 	bl	8000288 <__aeabi_dsub>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	e764      	b.n	8006994 <__ieee754_rem_pio2+0x194>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <__ieee754_rem_pio2+0x338>)
 8006acc:	4598      	cmp	r8, r3
 8006ace:	d935      	bls.n	8006b3c <__ieee754_rem_pio2+0x33c>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	f7f9 fbd6 	bl	8000288 <__aeabi_dsub>
 8006adc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ae0:	e9c4 0100 	strd	r0, r1, [r4]
 8006ae4:	e69e      	b.n	8006824 <__ieee754_rem_pio2+0x24>
 8006ae6:	bf00      	nop
 8006ae8:	54400000 	.word	0x54400000
 8006aec:	3ff921fb 	.word	0x3ff921fb
 8006af0:	1a626331 	.word	0x1a626331
 8006af4:	3dd0b461 	.word	0x3dd0b461
 8006af8:	1a600000 	.word	0x1a600000
 8006afc:	3dd0b461 	.word	0x3dd0b461
 8006b00:	2e037073 	.word	0x2e037073
 8006b04:	3ba3198a 	.word	0x3ba3198a
 8006b08:	6dc9c883 	.word	0x6dc9c883
 8006b0c:	3fe45f30 	.word	0x3fe45f30
 8006b10:	2e000000 	.word	0x2e000000
 8006b14:	3ba3198a 	.word	0x3ba3198a
 8006b18:	252049c1 	.word	0x252049c1
 8006b1c:	397b839a 	.word	0x397b839a
 8006b20:	3fe921fb 	.word	0x3fe921fb
 8006b24:	4002d97b 	.word	0x4002d97b
 8006b28:	3ff921fb 	.word	0x3ff921fb
 8006b2c:	413921fb 	.word	0x413921fb
 8006b30:	3fe00000 	.word	0x3fe00000
 8006b34:	08008880 	.word	0x08008880
 8006b38:	7fefffff 	.word	0x7fefffff
 8006b3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006b40:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006b44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006b48:	4630      	mov	r0, r6
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	f7fa f804 	bl	8000b58 <__aeabi_d2iz>
 8006b50:	f7f9 fce8 	bl	8000524 <__aeabi_i2d>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b60:	f7f9 fb92 	bl	8000288 <__aeabi_dsub>
 8006b64:	4b22      	ldr	r3, [pc, #136]	@ (8006bf0 <__ieee754_rem_pio2+0x3f0>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	f7f9 fd46 	bl	80005f8 <__aeabi_dmul>
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	f7f9 fff2 	bl	8000b58 <__aeabi_d2iz>
 8006b74:	f7f9 fcd6 	bl	8000524 <__aeabi_i2d>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b84:	f7f9 fb80 	bl	8000288 <__aeabi_dsub>
 8006b88:	4b19      	ldr	r3, [pc, #100]	@ (8006bf0 <__ieee754_rem_pio2+0x3f0>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7f9 fd34 	bl	80005f8 <__aeabi_dmul>
 8006b90:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006b94:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006b98:	f04f 0803 	mov.w	r8, #3
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	2700      	movs	r7, #0
 8006ba0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	46c2      	mov	sl, r8
 8006baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bae:	f7f9 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d1f4      	bne.n	8006ba0 <__ieee754_rem_pio2+0x3a0>
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <__ieee754_rem_pio2+0x3f4>)
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	2302      	movs	r3, #2
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	a806      	add	r0, sp, #24
 8006bc6:	f000 f81f 	bl	8006c08 <__kernel_rem_pio2>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	4605      	mov	r5, r0
 8006bd0:	f6bf ae53 	bge.w	800687a <__ieee754_rem_pio2+0x7a>
 8006bd4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006bd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bdc:	e9c4 2300 	strd	r2, r3, [r4]
 8006be0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006be4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006be8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006bec:	e740      	b.n	8006a70 <__ieee754_rem_pio2+0x270>
 8006bee:	bf00      	nop
 8006bf0:	41700000 	.word	0x41700000
 8006bf4:	08008900 	.word	0x08008900

08006bf8 <fabs>:
 8006bf8:	ec51 0b10 	vmov	r0, r1, d0
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c02:	ec43 2b10 	vmov	d0, r2, r3
 8006c06:	4770      	bx	lr

08006c08 <__kernel_rem_pio2>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	ed2d 8b02 	vpush	{d8}
 8006c10:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006c14:	f112 0f14 	cmn.w	r2, #20
 8006c18:	9306      	str	r3, [sp, #24]
 8006c1a:	9104      	str	r1, [sp, #16]
 8006c1c:	4bc2      	ldr	r3, [pc, #776]	@ (8006f28 <__kernel_rem_pio2+0x320>)
 8006c1e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006c20:	9008      	str	r0, [sp, #32]
 8006c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	9b06      	ldr	r3, [sp, #24]
 8006c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c2e:	bfa8      	it	ge
 8006c30:	1ed4      	subge	r4, r2, #3
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	bfb2      	itee	lt
 8006c36:	2400      	movlt	r4, #0
 8006c38:	2318      	movge	r3, #24
 8006c3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c3e:	f06f 0317 	mvn.w	r3, #23
 8006c42:	fb04 3303 	mla	r3, r4, r3, r3
 8006c46:	eb03 0b02 	add.w	fp, r3, r2
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8006f18 <__kernel_rem_pio2+0x310>
 8006c52:	eb03 0802 	add.w	r8, r3, r2
 8006c56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006c58:	1aa7      	subs	r7, r4, r2
 8006c5a:	ae20      	add	r6, sp, #128	@ 0x80
 8006c5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c60:	2500      	movs	r5, #0
 8006c62:	4545      	cmp	r5, r8
 8006c64:	dd12      	ble.n	8006c8c <__kernel_rem_pio2+0x84>
 8006c66:	9b06      	ldr	r3, [sp, #24]
 8006c68:	aa20      	add	r2, sp, #128	@ 0x80
 8006c6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c6e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006c72:	2700      	movs	r7, #0
 8006c74:	9b00      	ldr	r3, [sp, #0]
 8006c76:	429f      	cmp	r7, r3
 8006c78:	dc2e      	bgt.n	8006cd8 <__kernel_rem_pio2+0xd0>
 8006c7a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8006f18 <__kernel_rem_pio2+0x310>
 8006c7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c86:	46a8      	mov	r8, r5
 8006c88:	2600      	movs	r6, #0
 8006c8a:	e01b      	b.n	8006cc4 <__kernel_rem_pio2+0xbc>
 8006c8c:	42ef      	cmn	r7, r5
 8006c8e:	d407      	bmi.n	8006ca0 <__kernel_rem_pio2+0x98>
 8006c90:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c94:	f7f9 fc46 	bl	8000524 <__aeabi_i2d>
 8006c98:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	e7e0      	b.n	8006c62 <__kernel_rem_pio2+0x5a>
 8006ca0:	ec51 0b18 	vmov	r0, r1, d8
 8006ca4:	e7f8      	b.n	8006c98 <__kernel_rem_pio2+0x90>
 8006ca6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006caa:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cba:	f7f9 fae7 	bl	800028c <__adddf3>
 8006cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	9b05      	ldr	r3, [sp, #20]
 8006cc6:	429e      	cmp	r6, r3
 8006cc8:	dded      	ble.n	8006ca6 <__kernel_rem_pio2+0x9e>
 8006cca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cce:	3701      	adds	r7, #1
 8006cd0:	ecaa 7b02 	vstmia	sl!, {d7}
 8006cd4:	3508      	adds	r5, #8
 8006cd6:	e7cd      	b.n	8006c74 <__kernel_rem_pio2+0x6c>
 8006cd8:	9b00      	ldr	r3, [sp, #0]
 8006cda:	f8dd 8000 	ldr.w	r8, [sp]
 8006cde:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ce0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ce4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006ce8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cf4:	ab98      	add	r3, sp, #608	@ 0x260
 8006cf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cfa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006cfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d02:	ac0c      	add	r4, sp, #48	@ 0x30
 8006d04:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006d06:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006d0a:	46a1      	mov	r9, r4
 8006d0c:	46c2      	mov	sl, r8
 8006d0e:	f1ba 0f00 	cmp.w	sl, #0
 8006d12:	dc77      	bgt.n	8006e04 <__kernel_rem_pio2+0x1fc>
 8006d14:	4658      	mov	r0, fp
 8006d16:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006d1a:	f000 fac5 	bl	80072a8 <scalbn>
 8006d1e:	ec57 6b10 	vmov	r6, r7, d0
 8006d22:	2200      	movs	r2, #0
 8006d24:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006d28:	4630      	mov	r0, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f7f9 fc64 	bl	80005f8 <__aeabi_dmul>
 8006d30:	ec41 0b10 	vmov	d0, r0, r1
 8006d34:	f000 fb34 	bl	80073a0 <floor>
 8006d38:	4b7c      	ldr	r3, [pc, #496]	@ (8006f2c <__kernel_rem_pio2+0x324>)
 8006d3a:	ec51 0b10 	vmov	r0, r1, d0
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4630      	mov	r0, r6
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f7f9 fa9c 	bl	8000288 <__aeabi_dsub>
 8006d50:	460f      	mov	r7, r1
 8006d52:	4606      	mov	r6, r0
 8006d54:	f7f9 ff00 	bl	8000b58 <__aeabi_d2iz>
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	f7f9 fbe3 	bl	8000524 <__aeabi_i2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	f1bb 0f00 	cmp.w	fp, #0
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	dd6c      	ble.n	8006e4e <__kernel_rem_pio2+0x246>
 8006d74:	f108 31ff 	add.w	r1, r8, #4294967295
 8006d78:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d7a:	9d02      	ldr	r5, [sp, #8]
 8006d7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d80:	f1cb 0018 	rsb	r0, fp, #24
 8006d84:	fa43 f200 	asr.w	r2, r3, r0
 8006d88:	4415      	add	r5, r2
 8006d8a:	4082      	lsls	r2, r0
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d90:	9502      	str	r5, [sp, #8]
 8006d92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006d96:	f1cb 0217 	rsb	r2, fp, #23
 8006d9a:	fa43 f902 	asr.w	r9, r3, r2
 8006d9e:	f1b9 0f00 	cmp.w	r9, #0
 8006da2:	dd64      	ble.n	8006e6e <__kernel_rem_pio2+0x266>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	3301      	adds	r3, #1
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	4615      	mov	r5, r2
 8006dae:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006db2:	4590      	cmp	r8, r2
 8006db4:	f300 80a1 	bgt.w	8006efa <__kernel_rem_pio2+0x2f2>
 8006db8:	f1bb 0f00 	cmp.w	fp, #0
 8006dbc:	dd07      	ble.n	8006dce <__kernel_rem_pio2+0x1c6>
 8006dbe:	f1bb 0f01 	cmp.w	fp, #1
 8006dc2:	f000 80c1 	beq.w	8006f48 <__kernel_rem_pio2+0x340>
 8006dc6:	f1bb 0f02 	cmp.w	fp, #2
 8006dca:	f000 80c8 	beq.w	8006f5e <__kernel_rem_pio2+0x356>
 8006dce:	f1b9 0f02 	cmp.w	r9, #2
 8006dd2:	d14c      	bne.n	8006e6e <__kernel_rem_pio2+0x266>
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	4955      	ldr	r1, [pc, #340]	@ (8006f30 <__kernel_rem_pio2+0x328>)
 8006dda:	2000      	movs	r0, #0
 8006ddc:	f7f9 fa54 	bl	8000288 <__aeabi_dsub>
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	d042      	beq.n	8006e6e <__kernel_rem_pio2+0x266>
 8006de8:	4658      	mov	r0, fp
 8006dea:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006f20 <__kernel_rem_pio2+0x318>
 8006dee:	f000 fa5b 	bl	80072a8 <scalbn>
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	ec53 2b10 	vmov	r2, r3, d0
 8006dfa:	f7f9 fa45 	bl	8000288 <__aeabi_dsub>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	460f      	mov	r7, r1
 8006e02:	e034      	b.n	8006e6e <__kernel_rem_pio2+0x266>
 8006e04:	4b4b      	ldr	r3, [pc, #300]	@ (8006f34 <__kernel_rem_pio2+0x32c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0c:	f7f9 fbf4 	bl	80005f8 <__aeabi_dmul>
 8006e10:	f7f9 fea2 	bl	8000b58 <__aeabi_d2iz>
 8006e14:	f7f9 fb86 	bl	8000524 <__aeabi_i2d>
 8006e18:	4b47      	ldr	r3, [pc, #284]	@ (8006f38 <__kernel_rem_pio2+0x330>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	f7f9 fbea 	bl	80005f8 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2c:	f7f9 fa2c 	bl	8000288 <__aeabi_dsub>
 8006e30:	f7f9 fe92 	bl	8000b58 <__aeabi_d2iz>
 8006e34:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006e38:	f849 0b04 	str.w	r0, [r9], #4
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7f9 fa24 	bl	800028c <__adddf3>
 8006e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e4c:	e75f      	b.n	8006d0e <__kernel_rem_pio2+0x106>
 8006e4e:	d107      	bne.n	8006e60 <__kernel_rem_pio2+0x258>
 8006e50:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e54:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006e5e:	e79e      	b.n	8006d9e <__kernel_rem_pio2+0x196>
 8006e60:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <__kernel_rem_pio2+0x334>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fe4e 	bl	8000b04 <__aeabi_dcmpge>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d143      	bne.n	8006ef4 <__kernel_rem_pio2+0x2ec>
 8006e6c:	4681      	mov	r9, r0
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f000 80c1 	beq.w	8007002 <__kernel_rem_pio2+0x3fa>
 8006e80:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e84:	2200      	movs	r2, #0
 8006e86:	9900      	ldr	r1, [sp, #0]
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	da70      	bge.n	8006f6e <__kernel_rem_pio2+0x366>
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	f000 808b 	beq.w	8006fa8 <__kernel_rem_pio2+0x3a0>
 8006e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e96:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e98:	f1ab 0b18 	sub.w	fp, fp, #24
 8006e9c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f6      	beq.n	8006e92 <__kernel_rem_pio2+0x28a>
 8006ea4:	4658      	mov	r0, fp
 8006ea6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006f20 <__kernel_rem_pio2+0x318>
 8006eaa:	f000 f9fd 	bl	80072a8 <scalbn>
 8006eae:	f108 0301 	add.w	r3, r8, #1
 8006eb2:	00da      	lsls	r2, r3, #3
 8006eb4:	9205      	str	r2, [sp, #20]
 8006eb6:	ec55 4b10 	vmov	r4, r5, d0
 8006eba:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006ebc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8006f34 <__kernel_rem_pio2+0x32c>
 8006ec0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006ec4:	4646      	mov	r6, r8
 8006ec6:	f04f 0a00 	mov.w	sl, #0
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	f280 80d1 	bge.w	8007072 <__kernel_rem_pio2+0x46a>
 8006ed0:	4644      	mov	r4, r8
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	f2c0 80ff 	blt.w	80070d6 <__kernel_rem_pio2+0x4ce>
 8006ed8:	4b19      	ldr	r3, [pc, #100]	@ (8006f40 <__kernel_rem_pio2+0x338>)
 8006eda:	461f      	mov	r7, r3
 8006edc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006ede:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	2600      	movs	r6, #0
 8006eee:	eba8 0504 	sub.w	r5, r8, r4
 8006ef2:	e0e4      	b.n	80070be <__kernel_rem_pio2+0x4b6>
 8006ef4:	f04f 0902 	mov.w	r9, #2
 8006ef8:	e754      	b.n	8006da4 <__kernel_rem_pio2+0x19c>
 8006efa:	f854 3b04 	ldr.w	r3, [r4], #4
 8006efe:	bb0d      	cbnz	r5, 8006f44 <__kernel_rem_pio2+0x33c>
 8006f00:	b123      	cbz	r3, 8006f0c <__kernel_rem_pio2+0x304>
 8006f02:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006f06:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	3201      	adds	r2, #1
 8006f0e:	461d      	mov	r5, r3
 8006f10:	e74f      	b.n	8006db2 <__kernel_rem_pio2+0x1aa>
 8006f12:	bf00      	nop
 8006f14:	f3af 8000 	nop.w
	...
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	08008a48 	.word	0x08008a48
 8006f2c:	40200000 	.word	0x40200000
 8006f30:	3ff00000 	.word	0x3ff00000
 8006f34:	3e700000 	.word	0x3e700000
 8006f38:	41700000 	.word	0x41700000
 8006f3c:	3fe00000 	.word	0x3fe00000
 8006f40:	08008a08 	.word	0x08008a08
 8006f44:	1acb      	subs	r3, r1, r3
 8006f46:	e7de      	b.n	8006f06 <__kernel_rem_pio2+0x2fe>
 8006f48:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f56:	a90c      	add	r1, sp, #48	@ 0x30
 8006f58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f5c:	e737      	b.n	8006dce <__kernel_rem_pio2+0x1c6>
 8006f5e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f62:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f6c:	e7f3      	b.n	8006f56 <__kernel_rem_pio2+0x34e>
 8006f6e:	a90c      	add	r1, sp, #48	@ 0x30
 8006f70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	430a      	orrs	r2, r1
 8006f78:	e785      	b.n	8006e86 <__kernel_rem_pio2+0x27e>
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d0fa      	beq.n	8006f7a <__kernel_rem_pio2+0x372>
 8006f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f8a:	eb0d 0503 	add.w	r5, sp, r3
 8006f8e:	9b06      	ldr	r3, [sp, #24]
 8006f90:	aa20      	add	r2, sp, #128	@ 0x80
 8006f92:	4443      	add	r3, r8
 8006f94:	f108 0701 	add.w	r7, r8, #1
 8006f98:	3d98      	subs	r5, #152	@ 0x98
 8006f9a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006f9e:	4444      	add	r4, r8
 8006fa0:	42bc      	cmp	r4, r7
 8006fa2:	da04      	bge.n	8006fae <__kernel_rem_pio2+0x3a6>
 8006fa4:	46a0      	mov	r8, r4
 8006fa6:	e6a2      	b.n	8006cee <__kernel_rem_pio2+0xe6>
 8006fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006faa:	2401      	movs	r4, #1
 8006fac:	e7e6      	b.n	8006f7c <__kernel_rem_pio2+0x374>
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006fb4:	f7f9 fab6 	bl	8000524 <__aeabi_i2d>
 8006fb8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8007278 <__kernel_rem_pio2+0x670>
 8006fbc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fc8:	46b2      	mov	sl, r6
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	9b05      	ldr	r3, [sp, #20]
 8006fd0:	4598      	cmp	r8, r3
 8006fd2:	dd05      	ble.n	8006fe0 <__kernel_rem_pio2+0x3d8>
 8006fd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fd8:	3701      	adds	r7, #1
 8006fda:	eca5 7b02 	vstmia	r5!, {d7}
 8006fde:	e7df      	b.n	8006fa0 <__kernel_rem_pio2+0x398>
 8006fe0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006fe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff4:	f7f9 f94a 	bl	800028c <__adddf3>
 8006ff8:	f108 0801 	add.w	r8, r8, #1
 8006ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007000:	e7e5      	b.n	8006fce <__kernel_rem_pio2+0x3c6>
 8007002:	f1cb 0000 	rsb	r0, fp, #0
 8007006:	ec47 6b10 	vmov	d0, r6, r7
 800700a:	f000 f94d 	bl	80072a8 <scalbn>
 800700e:	ec55 4b10 	vmov	r4, r5, d0
 8007012:	4b9b      	ldr	r3, [pc, #620]	@ (8007280 <__kernel_rem_pio2+0x678>)
 8007014:	2200      	movs	r2, #0
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 fd73 	bl	8000b04 <__aeabi_dcmpge>
 800701e:	b300      	cbz	r0, 8007062 <__kernel_rem_pio2+0x45a>
 8007020:	4b98      	ldr	r3, [pc, #608]	@ (8007284 <__kernel_rem_pio2+0x67c>)
 8007022:	2200      	movs	r2, #0
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	f7f9 fd94 	bl	8000b58 <__aeabi_d2iz>
 8007030:	4606      	mov	r6, r0
 8007032:	f7f9 fa77 	bl	8000524 <__aeabi_i2d>
 8007036:	4b92      	ldr	r3, [pc, #584]	@ (8007280 <__kernel_rem_pio2+0x678>)
 8007038:	2200      	movs	r2, #0
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	460b      	mov	r3, r1
 8007040:	4602      	mov	r2, r0
 8007042:	4629      	mov	r1, r5
 8007044:	4620      	mov	r0, r4
 8007046:	f7f9 f91f 	bl	8000288 <__aeabi_dsub>
 800704a:	f7f9 fd85 	bl	8000b58 <__aeabi_d2iz>
 800704e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007050:	f10b 0b18 	add.w	fp, fp, #24
 8007054:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007060:	e720      	b.n	8006ea4 <__kernel_rem_pio2+0x29c>
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fd77 	bl	8000b58 <__aeabi_d2iz>
 800706a:	ab0c      	add	r3, sp, #48	@ 0x30
 800706c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007070:	e718      	b.n	8006ea4 <__kernel_rem_pio2+0x29c>
 8007072:	ab0c      	add	r3, sp, #48	@ 0x30
 8007074:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007078:	f7f9 fa54 	bl	8000524 <__aeabi_i2d>
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f7f9 faba 	bl	80005f8 <__aeabi_dmul>
 8007084:	4652      	mov	r2, sl
 8007086:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800708a:	465b      	mov	r3, fp
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	3e01      	subs	r6, #1
 8007096:	4604      	mov	r4, r0
 8007098:	460d      	mov	r5, r1
 800709a:	e716      	b.n	8006eca <__kernel_rem_pio2+0x2c2>
 800709c:	9906      	ldr	r1, [sp, #24]
 800709e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80070a2:	9106      	str	r1, [sp, #24]
 80070a4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	f7f9 f8ea 	bl	800028c <__adddf3>
 80070b8:	3601      	adds	r6, #1
 80070ba:	4682      	mov	sl, r0
 80070bc:	468b      	mov	fp, r1
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	429e      	cmp	r6, r3
 80070c2:	dc01      	bgt.n	80070c8 <__kernel_rem_pio2+0x4c0>
 80070c4:	42ae      	cmp	r6, r5
 80070c6:	dde9      	ble.n	800709c <__kernel_rem_pio2+0x494>
 80070c8:	ab48      	add	r3, sp, #288	@ 0x120
 80070ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80070ce:	e9c5 ab00 	strd	sl, fp, [r5]
 80070d2:	3c01      	subs	r4, #1
 80070d4:	e6fd      	b.n	8006ed2 <__kernel_rem_pio2+0x2ca>
 80070d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80070d8:	2b02      	cmp	r3, #2
 80070da:	dc0b      	bgt.n	80070f4 <__kernel_rem_pio2+0x4ec>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc35      	bgt.n	800714c <__kernel_rem_pio2+0x544>
 80070e0:	d059      	beq.n	8007196 <__kernel_rem_pio2+0x58e>
 80070e2:	9b02      	ldr	r3, [sp, #8]
 80070e4:	f003 0007 	and.w	r0, r3, #7
 80070e8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80070ec:	ecbd 8b02 	vpop	{d8}
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d1f3      	bne.n	80070e2 <__kernel_rem_pio2+0x4da>
 80070fa:	9b05      	ldr	r3, [sp, #20]
 80070fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007100:	eb0d 0403 	add.w	r4, sp, r3
 8007104:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007108:	4625      	mov	r5, r4
 800710a:	46c2      	mov	sl, r8
 800710c:	f1ba 0f00 	cmp.w	sl, #0
 8007110:	dc69      	bgt.n	80071e6 <__kernel_rem_pio2+0x5de>
 8007112:	4645      	mov	r5, r8
 8007114:	2d01      	cmp	r5, #1
 8007116:	f300 8087 	bgt.w	8007228 <__kernel_rem_pio2+0x620>
 800711a:	9c05      	ldr	r4, [sp, #20]
 800711c:	ab48      	add	r3, sp, #288	@ 0x120
 800711e:	441c      	add	r4, r3
 8007120:	2000      	movs	r0, #0
 8007122:	2100      	movs	r1, #0
 8007124:	f1b8 0f01 	cmp.w	r8, #1
 8007128:	f300 809c 	bgt.w	8007264 <__kernel_rem_pio2+0x65c>
 800712c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8007130:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8007134:	f1b9 0f00 	cmp.w	r9, #0
 8007138:	f040 80a6 	bne.w	8007288 <__kernel_rem_pio2+0x680>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	e9c3 5600 	strd	r5, r6, [r3]
 8007142:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007146:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800714a:	e7ca      	b.n	80070e2 <__kernel_rem_pio2+0x4da>
 800714c:	9d05      	ldr	r5, [sp, #20]
 800714e:	ab48      	add	r3, sp, #288	@ 0x120
 8007150:	441d      	add	r5, r3
 8007152:	4644      	mov	r4, r8
 8007154:	2000      	movs	r0, #0
 8007156:	2100      	movs	r1, #0
 8007158:	2c00      	cmp	r4, #0
 800715a:	da35      	bge.n	80071c8 <__kernel_rem_pio2+0x5c0>
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	d038      	beq.n	80071d4 <__kernel_rem_pio2+0x5cc>
 8007162:	4602      	mov	r2, r0
 8007164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007168:	9c04      	ldr	r4, [sp, #16]
 800716a:	e9c4 2300 	strd	r2, r3, [r4]
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	ad4a      	add	r5, sp, #296	@ 0x128
 800717c:	2401      	movs	r4, #1
 800717e:	45a0      	cmp	r8, r4
 8007180:	da2b      	bge.n	80071da <__kernel_rem_pio2+0x5d2>
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	d002      	beq.n	800718e <__kernel_rem_pio2+0x586>
 8007188:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800718c:	4619      	mov	r1, r3
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007194:	e7a5      	b.n	80070e2 <__kernel_rem_pio2+0x4da>
 8007196:	9c05      	ldr	r4, [sp, #20]
 8007198:	ab48      	add	r3, sp, #288	@ 0x120
 800719a:	441c      	add	r4, r3
 800719c:	2000      	movs	r0, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	f1b8 0f00 	cmp.w	r8, #0
 80071a4:	da09      	bge.n	80071ba <__kernel_rem_pio2+0x5b2>
 80071a6:	f1b9 0f00 	cmp.w	r9, #0
 80071aa:	d002      	beq.n	80071b2 <__kernel_rem_pio2+0x5aa>
 80071ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071b0:	4619      	mov	r1, r3
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	e9c3 0100 	strd	r0, r1, [r3]
 80071b8:	e793      	b.n	80070e2 <__kernel_rem_pio2+0x4da>
 80071ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80071be:	f7f9 f865 	bl	800028c <__adddf3>
 80071c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c6:	e7eb      	b.n	80071a0 <__kernel_rem_pio2+0x598>
 80071c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80071cc:	f7f9 f85e 	bl	800028c <__adddf3>
 80071d0:	3c01      	subs	r4, #1
 80071d2:	e7c1      	b.n	8007158 <__kernel_rem_pio2+0x550>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	e7c6      	b.n	8007168 <__kernel_rem_pio2+0x560>
 80071da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80071de:	f7f9 f855 	bl	800028c <__adddf3>
 80071e2:	3401      	adds	r4, #1
 80071e4:	e7cb      	b.n	800717e <__kernel_rem_pio2+0x576>
 80071e6:	ed35 7b02 	vldmdb	r5!, {d7}
 80071ea:	ed8d 7b00 	vstr	d7, [sp]
 80071ee:	ed95 7b02 	vldr	d7, [r5, #8]
 80071f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071f6:	ec53 2b17 	vmov	r2, r3, d7
 80071fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071fe:	f7f9 f845 	bl	800028c <__adddf3>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800720e:	f7f9 f83b 	bl	8000288 <__aeabi_dsub>
 8007212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007216:	f7f9 f839 	bl	800028c <__adddf3>
 800721a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800721e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007222:	e9c5 6700 	strd	r6, r7, [r5]
 8007226:	e771      	b.n	800710c <__kernel_rem_pio2+0x504>
 8007228:	ed34 7b02 	vldmdb	r4!, {d7}
 800722c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007230:	ec51 0b17 	vmov	r0, r1, d7
 8007234:	4652      	mov	r2, sl
 8007236:	465b      	mov	r3, fp
 8007238:	ed8d 7b00 	vstr	d7, [sp]
 800723c:	f7f9 f826 	bl	800028c <__adddf3>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4606      	mov	r6, r0
 8007246:	460f      	mov	r7, r1
 8007248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800724c:	f7f9 f81c 	bl	8000288 <__aeabi_dsub>
 8007250:	4652      	mov	r2, sl
 8007252:	465b      	mov	r3, fp
 8007254:	f7f9 f81a 	bl	800028c <__adddf3>
 8007258:	3d01      	subs	r5, #1
 800725a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800725e:	e9c4 6700 	strd	r6, r7, [r4]
 8007262:	e757      	b.n	8007114 <__kernel_rem_pio2+0x50c>
 8007264:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007268:	f7f9 f810 	bl	800028c <__adddf3>
 800726c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007270:	e758      	b.n	8007124 <__kernel_rem_pio2+0x51c>
 8007272:	bf00      	nop
 8007274:	f3af 8000 	nop.w
	...
 8007280:	41700000 	.word	0x41700000
 8007284:	3e700000 	.word	0x3e700000
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	601d      	str	r5, [r3, #0]
 800728e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8007292:	605c      	str	r4, [r3, #4]
 8007294:	609f      	str	r7, [r3, #8]
 8007296:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800729a:	60d3      	str	r3, [r2, #12]
 800729c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072a0:	6110      	str	r0, [r2, #16]
 80072a2:	6153      	str	r3, [r2, #20]
 80072a4:	e71d      	b.n	80070e2 <__kernel_rem_pio2+0x4da>
 80072a6:	bf00      	nop

080072a8 <scalbn>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	ec55 4b10 	vmov	r4, r5, d0
 80072ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80072b2:	4606      	mov	r6, r0
 80072b4:	462b      	mov	r3, r5
 80072b6:	b991      	cbnz	r1, 80072de <scalbn+0x36>
 80072b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80072bc:	4323      	orrs	r3, r4
 80072be:	d03b      	beq.n	8007338 <scalbn+0x90>
 80072c0:	4b33      	ldr	r3, [pc, #204]	@ (8007390 <scalbn+0xe8>)
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	2200      	movs	r2, #0
 80072c8:	f7f9 f996 	bl	80005f8 <__aeabi_dmul>
 80072cc:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <scalbn+0xec>)
 80072ce:	429e      	cmp	r6, r3
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	da0f      	bge.n	80072f6 <scalbn+0x4e>
 80072d6:	a326      	add	r3, pc, #152	@ (adr r3, 8007370 <scalbn+0xc8>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	e01e      	b.n	800731c <scalbn+0x74>
 80072de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d10b      	bne.n	80072fe <scalbn+0x56>
 80072e6:	4622      	mov	r2, r4
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f8 ffce 	bl	800028c <__adddf3>
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	e020      	b.n	8007338 <scalbn+0x90>
 80072f6:	460b      	mov	r3, r1
 80072f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80072fc:	3936      	subs	r1, #54	@ 0x36
 80072fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007302:	4296      	cmp	r6, r2
 8007304:	dd0d      	ble.n	8007322 <scalbn+0x7a>
 8007306:	2d00      	cmp	r5, #0
 8007308:	a11b      	add	r1, pc, #108	@ (adr r1, 8007378 <scalbn+0xd0>)
 800730a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800730e:	da02      	bge.n	8007316 <scalbn+0x6e>
 8007310:	a11b      	add	r1, pc, #108	@ (adr r1, 8007380 <scalbn+0xd8>)
 8007312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007316:	a318      	add	r3, pc, #96	@ (adr r3, 8007378 <scalbn+0xd0>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f9 f96c 	bl	80005f8 <__aeabi_dmul>
 8007320:	e7e6      	b.n	80072f0 <scalbn+0x48>
 8007322:	1872      	adds	r2, r6, r1
 8007324:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007328:	428a      	cmp	r2, r1
 800732a:	dcec      	bgt.n	8007306 <scalbn+0x5e>
 800732c:	2a00      	cmp	r2, #0
 800732e:	dd06      	ble.n	800733e <scalbn+0x96>
 8007330:	f36f 531e 	bfc	r3, #20, #11
 8007334:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007338:	ec45 4b10 	vmov	d0, r4, r5
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007342:	da08      	bge.n	8007356 <scalbn+0xae>
 8007344:	2d00      	cmp	r5, #0
 8007346:	a10a      	add	r1, pc, #40	@ (adr r1, 8007370 <scalbn+0xc8>)
 8007348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800734c:	dac3      	bge.n	80072d6 <scalbn+0x2e>
 800734e:	a10e      	add	r1, pc, #56	@ (adr r1, 8007388 <scalbn+0xe0>)
 8007350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007354:	e7bf      	b.n	80072d6 <scalbn+0x2e>
 8007356:	3236      	adds	r2, #54	@ 0x36
 8007358:	f36f 531e 	bfc	r3, #20, #11
 800735c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007360:	4620      	mov	r0, r4
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <scalbn+0xf0>)
 8007364:	4629      	mov	r1, r5
 8007366:	2200      	movs	r2, #0
 8007368:	e7d8      	b.n	800731c <scalbn+0x74>
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w
 8007370:	c2f8f359 	.word	0xc2f8f359
 8007374:	01a56e1f 	.word	0x01a56e1f
 8007378:	8800759c 	.word	0x8800759c
 800737c:	7e37e43c 	.word	0x7e37e43c
 8007380:	8800759c 	.word	0x8800759c
 8007384:	fe37e43c 	.word	0xfe37e43c
 8007388:	c2f8f359 	.word	0xc2f8f359
 800738c:	81a56e1f 	.word	0x81a56e1f
 8007390:	43500000 	.word	0x43500000
 8007394:	ffff3cb0 	.word	0xffff3cb0
 8007398:	3c900000 	.word	0x3c900000
 800739c:	00000000 	.word	0x00000000

080073a0 <floor>:
 80073a0:	ec51 0b10 	vmov	r0, r1, d0
 80073a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80073b0:	2e13      	cmp	r6, #19
 80073b2:	460c      	mov	r4, r1
 80073b4:	4605      	mov	r5, r0
 80073b6:	4680      	mov	r8, r0
 80073b8:	dc34      	bgt.n	8007424 <floor+0x84>
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	da17      	bge.n	80073ee <floor+0x4e>
 80073be:	a332      	add	r3, pc, #200	@ (adr r3, 8007488 <floor+0xe8>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f7f8 ff62 	bl	800028c <__adddf3>
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	f7f9 fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80073d0:	b150      	cbz	r0, 80073e8 <floor+0x48>
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	da55      	bge.n	8007482 <floor+0xe2>
 80073d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80073da:	432c      	orrs	r4, r5
 80073dc:	2500      	movs	r5, #0
 80073de:	42ac      	cmp	r4, r5
 80073e0:	4c2b      	ldr	r4, [pc, #172]	@ (8007490 <floor+0xf0>)
 80073e2:	bf08      	it	eq
 80073e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80073e8:	4621      	mov	r1, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	e023      	b.n	8007436 <floor+0x96>
 80073ee:	4f29      	ldr	r7, [pc, #164]	@ (8007494 <floor+0xf4>)
 80073f0:	4137      	asrs	r7, r6
 80073f2:	ea01 0307 	and.w	r3, r1, r7
 80073f6:	4303      	orrs	r3, r0
 80073f8:	d01d      	beq.n	8007436 <floor+0x96>
 80073fa:	a323      	add	r3, pc, #140	@ (adr r3, 8007488 <floor+0xe8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f8 ff44 	bl	800028c <__adddf3>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	f7f9 fb86 	bl	8000b18 <__aeabi_dcmpgt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d0eb      	beq.n	80073e8 <floor+0x48>
 8007410:	2c00      	cmp	r4, #0
 8007412:	bfbe      	ittt	lt
 8007414:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007418:	4133      	asrlt	r3, r6
 800741a:	18e4      	addlt	r4, r4, r3
 800741c:	ea24 0407 	bic.w	r4, r4, r7
 8007420:	2500      	movs	r5, #0
 8007422:	e7e1      	b.n	80073e8 <floor+0x48>
 8007424:	2e33      	cmp	r6, #51	@ 0x33
 8007426:	dd0a      	ble.n	800743e <floor+0x9e>
 8007428:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800742c:	d103      	bne.n	8007436 <floor+0x96>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	f7f8 ff2b 	bl	800028c <__adddf3>
 8007436:	ec41 0b10 	vmov	d0, r0, r1
 800743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007442:	f04f 37ff 	mov.w	r7, #4294967295
 8007446:	40df      	lsrs	r7, r3
 8007448:	4207      	tst	r7, r0
 800744a:	d0f4      	beq.n	8007436 <floor+0x96>
 800744c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007488 <floor+0xe8>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 ff1b 	bl	800028c <__adddf3>
 8007456:	2200      	movs	r2, #0
 8007458:	2300      	movs	r3, #0
 800745a:	f7f9 fb5d 	bl	8000b18 <__aeabi_dcmpgt>
 800745e:	2800      	cmp	r0, #0
 8007460:	d0c2      	beq.n	80073e8 <floor+0x48>
 8007462:	2c00      	cmp	r4, #0
 8007464:	da0a      	bge.n	800747c <floor+0xdc>
 8007466:	2e14      	cmp	r6, #20
 8007468:	d101      	bne.n	800746e <floor+0xce>
 800746a:	3401      	adds	r4, #1
 800746c:	e006      	b.n	800747c <floor+0xdc>
 800746e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007472:	2301      	movs	r3, #1
 8007474:	40b3      	lsls	r3, r6
 8007476:	441d      	add	r5, r3
 8007478:	4545      	cmp	r5, r8
 800747a:	d3f6      	bcc.n	800746a <floor+0xca>
 800747c:	ea25 0507 	bic.w	r5, r5, r7
 8007480:	e7b2      	b.n	80073e8 <floor+0x48>
 8007482:	2500      	movs	r5, #0
 8007484:	462c      	mov	r4, r5
 8007486:	e7af      	b.n	80073e8 <floor+0x48>
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	bff00000 	.word	0xbff00000
 8007494:	000fffff 	.word	0x000fffff

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	bf00      	nop
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
